---
name: Run Examples Scripts

on:
    pull_request:
        types: [labeled]
    workflow_dispatch:
        inputs:
            reason:
                description: Reason for manual trigger
                required: true
                default: ''
    schedule:
        - cron: 30 22 * * * # Runs at 10:30pm UTC every day

permissions:
    contents: read
    pull-requests: write
    issues: write

jobs:
    test-examples:
        if: github.event.label.name == 'test-examples' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        runs-on: blacksmith-2vcpu-ubuntu-2404
        timeout-minutes: 60
        steps:
            - name: Checkout
              uses: actions/checkout@v5

            - name: Install uv
              uses: astral-sh/setup-uv@v7
              with:
                  enable-cache: true

            - name: Install Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '22'

            - name: Install dependencies
              run: uv sync --frozen --group dev

            - name: Run examples
              env:
                  LLM_API_KEY: ${{ secrets.LLM_API_KEY }}
                  LLM_MODEL: openhands/claude-haiku-4-5-20251001
                  LLM_BASE_URL: ${{ secrets.LLM_BASE_URL }}
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  PR_NUMBER: ${{ github.event.pull_request.number }}
                  REPO_OWNER: ${{ github.repository_owner }}
                  REPO_NAME: ${{ github.event.repository.name }}
              run: |
                  # List of examples to test
                  # Excluded examples:
                  # - 04_confirmation_mode_example.py: requires user input
                  # - 06_interactive_terminal_w_reasoning.py: interactive terminal
                  # - 08_mcp_with_oauth.py: requires OAuth setup
                  # - 15_browser_use.py: requires browser setup
                  # - 16_llm_security_analyzer.py: requires user input
                  # - 03_browser_use_with_docker_sandboxed_server.py: Docker build cache issues
                  # - 04_convo_with_api_sandboxed_server.py: requires sandbox API keys
                  # - 04_vscode_with_docker_sandboxed_server.py: requires VSCode setup
                  EXAMPLES=(
                      "examples/01_standalone_sdk/01_hello_world.py"
                      "examples/01_standalone_sdk/02_custom_tools.py"
                      "examples/01_standalone_sdk/03_activate_skill.py"
                      "examples/01_standalone_sdk/05_use_llm_registry.py"
                      "examples/01_standalone_sdk/07_mcp_integration.py"
                      "examples/01_standalone_sdk/09_pause_example.py"
                      "examples/01_standalone_sdk/10_persistence.py"
                      "examples/01_standalone_sdk/11_async.py"
                      "examples/01_standalone_sdk/12_custom_secrets.py"
                      "examples/01_standalone_sdk/13_get_llm_metrics.py"
                      "examples/01_standalone_sdk/14_context_condenser.py"
                      "examples/01_standalone_sdk/17_image_input.py"
                      "examples/01_standalone_sdk/18_send_message_while_processing.py"
                      "examples/01_standalone_sdk/19_llm_routing.py"
                      "examples/01_standalone_sdk/20_stuck_detector.py"
                      "examples/01_standalone_sdk/21_generate_extraneous_conversation_costs.py"
                      "examples/01_standalone_sdk/22_anthropic_thinking.py"
                      "examples/01_standalone_sdk/23_responses_reasoning.py"
                      "examples/01_standalone_sdk/24_planning_agent_workflow.py"
                      "examples/02_remote_agent_server/01_convo_with_local_agent_server.py"
                      "examples/02_remote_agent_server/02_convo_with_docker_sandboxed_server.py"
                  )

                  # GitHub API setup (only for PR events)
                  if [ "${{ github.event_name }}" = "pull_request" ]; then
                      API_URL="https://api.github.com/repos/${REPO_OWNER}/${REPO_NAME}/issues/${PR_NUMBER}/comments"
                  fi

                  # Function to update PR comment
                  update_comment() {
                      # Skip if not a PR event
                      if [ "${{ github.event_name }}" != "pull_request" ]; then
                          return
                      fi
                      
                      local comment_body="$1"
                      local response
                      
                      if [ -z "$COMMENT_ID" ]; then
                          # Create new comment
                          response=$(curl -s -X POST \
                              -H "Authorization: token ${GITHUB_TOKEN}" \
                              -H "Accept: application/vnd.github.v3+json" \
                              "${API_URL}" \
                              -d "{\"body\":$(echo "$comment_body" | jq -Rs .)}")
                          COMMENT_ID=$(echo "$response" | jq -r '.id')
                          echo "Created comment with ID: $COMMENT_ID"
                      else
                          # Update existing comment
                          curl -s -X PATCH \
                              -H "Authorization: token ${GITHUB_TOKEN}" \
                              -H "Accept: application/vnd.github.v3+json" \
                              "https://api.github.com/repos/${REPO_OWNER}/${REPO_NAME}/issues/comments/${COMMENT_ID}" \
                              -d "{\"body\":$(echo "$comment_body" | jq -Rs .)}" > /dev/null
                      fi
                  }

                  # Function to format cost with 2 decimal places
                  format_cost() {
                      local cost="$1"
                      if [ -z "$cost" ] || [ "$cost" = "N/A" ]; then
                          echo "N/A"
                      else
                          printf "\$%.2f" "$cost" 2>/dev/null || echo "N/A"
                      fi
                  }

                  # Function to generate markdown table
                  generate_table() {
                      local header="## 🔄 Running Examples with \`${LLM_MODEL}\`\n\n"
                      header+="_Last updated: $(date -u '+%Y-%m-%d %H:%M:%S UTC')_\n\n"
                      header+="| Example | Status | Duration | Cost |\n"
                      header+="|---------|--------|----------|------|\n"
                      
                      local rows=""
                      for example in "${EXAMPLES[@]}"; do
                          # Strip examples/ prefix and show relative path from there
                          local short_name="${example#examples/}"
                          local status="${TEST_STATUS[$example]:-⏳ Pending}"
                          local duration="${TEST_DURATION[$example]:--}"
                          local cost="${TEST_COST[$example]:--}"
                          rows+="| ${short_name} | ${status} | ${duration} | ${cost} |\n"
                      done
                      
                      local summary="\n---\n\n"
                      if [ $COMPLETED -eq ${#EXAMPLES[@]} ]; then
                          if [ $FAILED -eq 0 ]; then
                              summary+="### ✅ All tests passed!\n\n"
                          else
                              summary+="### ❌ Some tests failed\n\n"
                          fi
                          summary+="**Total:** ${#EXAMPLES[@]} | **Passed:** ${PASSED} | **Failed:** ${FAILED}"
                          
                          # Calculate and display total cost if available
                          if [ -n "$TOTAL_COST" ]; then
                              summary+=" | **Total Cost:** $(format_cost $TOTAL_COST)"
                          fi
                          
                          summary+="\n\n[View full workflow run](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID})"
                      else
                          summary+="**Progress:** ${COMPLETED}/${#EXAMPLES[@]} completed | **Passed:** ${PASSED} | **Failed:** ${FAILED}"
                      fi
                      
                      echo -e "${header}${rows}${summary}"
                  }

                  # Initialize tracking variables
                  declare -A TEST_STATUS
                  declare -A TEST_DURATION
                  declare -A TEST_COST
                  FAILED=0
                  PASSED=0
                  COMPLETED=0
                  TOTAL_COST=0
                  FAILED_EXAMPLES=()
                  RESULTS_FILE="test-results.txt"
                  COMMENT_ID=""

                  # Clear results file
                  > "$RESULTS_FILE"

                  # Create initial comment with all tests pending (only for PR events)
                  if [ "${{ github.event_name }}" = "pull_request" ]; then
                      echo "Creating initial PR comment..."
                      update_comment "$(generate_table)"
                  fi

                  echo "=========================================="
                  echo "Running ${#EXAMPLES[@]} examples with $LLM_MODEL"
                  echo "=========================================="

                  for example in "${EXAMPLES[@]}"; do
                      echo ""
                      echo "Running: $example"
                      echo "------------------------------------------"
                      
                      START_TIME=$(date +%s)
                      
                      # Create temp file to capture output
                      OUTPUT_FILE=$(mktemp)
                      
                      # Run example with timeout (20 minutes per example)
                      # Capture output while still displaying it
                      if timeout 1200 uv run python "$example" 2>&1 | tee "$OUTPUT_FILE"; then
                          END_TIME=$(date +%s)
                          DURATION=$((END_TIME - START_TIME))
                          DURATION_STR="${DURATION}s"
                          
                          # Extract cost from output
                          COST=$(grep "EXAMPLE_COST:" "$OUTPUT_FILE" | awk '{print $2}' | tail -1)
                          if [ -z "$COST" ]; then
                              COST="0.00"
                          fi
                          
                          # Accumulate total cost
                          TOTAL_COST=$(echo "$TOTAL_COST + $COST" | bc -l)
                          
                          echo "✓ PASSED: $example (${DURATION_STR}, cost: \$${COST})"
                          PASSED=$((PASSED + 1))
                          COMPLETED=$((COMPLETED + 1))
                          TEST_STATUS[$example]="✅ PASS"
                          TEST_DURATION[$example]="${DURATION_STR}"
                          TEST_COST[$example]="$(format_cost $COST)"
                          echo "PASS|$example|${DURATION}|${COST}" >> "$RESULTS_FILE"
                      else
                          EXIT_CODE=$?
                          END_TIME=$(date +%s)
                          DURATION=$((END_TIME - START_TIME))
                          DURATION_STR="${DURATION}s"
                          
                          # Try to extract cost even for failed tests
                          COST=$(grep "EXAMPLE_COST:" "$OUTPUT_FILE" | awk '{print $2}' | tail -1)
                          if [ -z "$COST" ]; then
                              COST="0.00"
                          fi
                          
                          # Accumulate total cost
                          TOTAL_COST=$(echo "$TOTAL_COST + $COST" | bc -l)
                          
                          echo "✗ FAILED: $example (exit code: $EXIT_CODE, ${DURATION_STR}, cost: \$${COST})"
                          FAILED=$((FAILED + 1))
                          COMPLETED=$((COMPLETED + 1))
                          FAILED_EXAMPLES+=("$example")
                          TEST_STATUS[$example]="❌ FAIL (exit: ${EXIT_CODE})"
                          TEST_DURATION[$example]="${DURATION_STR}"
                          TEST_COST[$example]="$(format_cost $COST)"
                          echo "FAIL|$example|$EXIT_CODE|${DURATION}|${COST}" >> "$RESULTS_FILE"
                      fi
                      
                      # Clean up temp file
                      rm -f "$OUTPUT_FILE"
                      
                      # Update PR comment after each test
                      echo "Updating PR comment..."
                      update_comment "$(generate_table)"
                  done

                  echo ""
                  echo "=========================================="
                  echo "Test Results Summary"
                  echo "=========================================="
                  echo "Total: ${#EXAMPLES[@]}"
                  echo "Passed: $PASSED"
                  echo "Failed: $FAILED"
                  echo "Total Cost: $(format_cost $TOTAL_COST)"

                  # Generate final report and save to file
                  FINAL_REPORT=$(generate_table)
                  echo "$FINAL_REPORT" > examples_report.md
                  echo "Final report saved to examples_report.md"

                  if [ $FAILED -gt 0 ]; then
                      echo ""
                      echo "Failed examples:"
                      for failed_example in "${FAILED_EXAMPLES[@]}"; do
                          echo "  - $failed_example"
                      done
                      exit 1
                  fi

                  echo ""
                  echo "All examples passed! ✓"

            - name: Read examples report for issue comment
              if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
              id: read_report
              run: |
                  if [ -f examples_report.md ]; then
                      REPORT_CONTENT=$(cat examples_report.md)
                      echo "report<<EOF" >> $GITHUB_OUTPUT
                      echo "$REPORT_CONTENT" >> $GITHUB_OUTPUT
                      echo "EOF" >> $GITHUB_OUTPUT
                  else
                      echo "report=Report file not found" >> $GITHUB_OUTPUT
                  fi

            - name: Comment with results on tracker issue
              if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
              uses: KeisukeYamashita/create-comment@v1
              with:
                  number: 976
                  unique: false
                  comment: |
                      **Trigger:** ${{ github.event_name == 'schedule' && 'Nightly Scheduled Run' || format('Manual Trigger: {0}', github.event.inputs.reason) }}
                      **Commit:** ${{ github.sha }}
                      **Workflow Run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

                      ${{ steps.read_report.outputs.report }}
