---
name: Run Examples Scripts on PR

on:
    pull_request:
        types: [labeled]

permissions:
    contents: read
    pull-requests: write

jobs:
    test-examples:
        if: github.event.label.name == 'test-examples'
        runs-on: blacksmith-2vcpu-ubuntu-2404
        timeout-minutes: 60
        steps:
            - name: Checkout
              uses: actions/checkout@v5

            - name: Install uv
              uses: astral-sh/setup-uv@v7
              with:
                  enable-cache: true

            - name: Install Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '22'

            - name: Install dependencies
              run: uv sync --frozen --group dev

            - name: Run examples
              env:
                  LLM_API_KEY: ${{ secrets.LLM_API_KEY }}
                  LLM_MODEL: openhands/claude-haiku-4-5-20251001
                  LLM_BASE_URL: ${{ secrets.LLM_BASE_URL }}
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  PR_NUMBER: ${{ github.event.pull_request.number }}
                  REPO_OWNER: ${{ github.repository_owner }}
                  REPO_NAME: ${{ github.event.repository.name }}
              run: |
                  # List of examples to test
                  # Excluded examples:
                  # - 04_confirmation_mode_example.py: requires user input
                  # - 06_interactive_terminal_w_reasoning.py: interactive terminal
                  # - 08_mcp_with_oauth.py: requires OAuth setup
                  # - 15_browser_use.py: requires browser setup
                  # - 16_llm_security_analyzer.py: requires user input
                  EXAMPLES=(
                      "examples/01_standalone_sdk/01_hello_world.py"
                      "examples/01_standalone_sdk/02_custom_tools.py"
                      "examples/01_standalone_sdk/03_activate_skill.py"
                      "examples/01_standalone_sdk/05_use_llm_registry.py"
                      "examples/01_standalone_sdk/07_mcp_integration.py"
                      "examples/01_standalone_sdk/09_pause_example.py"
                      "examples/01_standalone_sdk/10_persistence.py"
                      "examples/01_standalone_sdk/11_async.py"
                      "examples/01_standalone_sdk/12_custom_secrets.py"
                      "examples/01_standalone_sdk/13_get_llm_metrics.py"
                      "examples/01_standalone_sdk/14_context_condenser.py"
                      "examples/01_standalone_sdk/17_image_input.py"
                      "examples/01_standalone_sdk/18_send_message_while_processing.py"
                      "examples/01_standalone_sdk/19_llm_routing.py"
                      "examples/01_standalone_sdk/20_stuck_detector.py"
                      "examples/01_standalone_sdk/21_generate_extraneous_conversation_costs.py"
                      "examples/01_standalone_sdk/22_anthropic_thinking.py"
                      "examples/01_standalone_sdk/23_responses_reasoning.py"
                      "examples/01_standalone_sdk/24_planning_agent_workflow.py"
                  )

                  # GitHub API setup
                  API_URL="https://api.github.com/repos/${REPO_OWNER}/${REPO_NAME}/issues/${PR_NUMBER}/comments"

                  # Function to update PR comment
                  update_comment() {
                      local comment_body="$1"
                      local response
                      
                      if [ -z "$COMMENT_ID" ]; then
                          # Create new comment
                          response=$(curl -s -X POST \
                              -H "Authorization: token ${GITHUB_TOKEN}" \
                              -H "Accept: application/vnd.github.v3+json" \
                              "${API_URL}" \
                              -d "{\"body\":$(echo "$comment_body" | jq -Rs .)}")
                          COMMENT_ID=$(echo "$response" | jq -r '.id')
                          echo "Created comment with ID: $COMMENT_ID"
                      else
                          # Update existing comment
                          curl -s -X PATCH \
                              -H "Authorization: token ${GITHUB_TOKEN}" \
                              -H "Accept: application/vnd.github.v3+json" \
                              "https://api.github.com/repos/${REPO_OWNER}/${REPO_NAME}/issues/comments/${COMMENT_ID}" \
                              -d "{\"body\":$(echo "$comment_body" | jq -Rs .)}" > /dev/null
                      fi
                  }

                  # Function to generate markdown table
                  generate_table() {
                      local header="## 🔄 Running Examples with \`${LLM_MODEL}\`\n\n"
                      header+="_Last updated: $(date -u '+%Y-%m-%d %H:%M:%S UTC')_\n\n"
                      header+="| Example | Status | Duration |\n"
                      header+="|---------|--------|----------|\n"
                      
                      local rows=""
                      for example in "${EXAMPLES[@]}"; do
                          local short_name="${example#examples/01_standalone_sdk/}"
                          local status="${TEST_STATUS[$example]:-⏳ Pending}"
                          local duration="${TEST_DURATION[$example]:--}"
                          rows+="| ${short_name} | ${status} | ${duration} |\n"
                      done
                      
                      local summary="\n---\n\n"
                      if [ $COMPLETED -eq ${#EXAMPLES[@]} ]; then
                          if [ $FAILED -eq 0 ]; then
                              summary+="### ✅ All tests passed!\n\n"
                          else
                              summary+="### ❌ Some tests failed\n\n"
                          fi
                          summary+="**Total:** ${#EXAMPLES[@]} | **Passed:** ${PASSED} | **Failed:** ${FAILED}\n\n"
                          summary+="[View full workflow run](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID})"
                      else
                          summary+="**Progress:** ${COMPLETED}/${#EXAMPLES[@]} completed | **Passed:** ${PASSED} | **Failed:** ${FAILED}"
                      fi
                      
                      echo -e "${header}${rows}${summary}"
                  }

                  # Initialize tracking variables
                  declare -A TEST_STATUS
                  declare -A TEST_DURATION
                  FAILED=0
                  PASSED=0
                  COMPLETED=0
                  FAILED_EXAMPLES=()
                  RESULTS_FILE="test-results.txt"
                  COMMENT_ID=""

                  # Clear results file
                  > "$RESULTS_FILE"

                  # Create initial comment with all tests pending
                  echo "Creating initial PR comment..."
                  update_comment "$(generate_table)"

                  echo "=========================================="
                  echo "Running ${#EXAMPLES[@]} examples with $LLM_MODEL"
                  echo "=========================================="

                  for example in "${EXAMPLES[@]}"; do
                      echo ""
                      echo "Running: $example"
                      echo "------------------------------------------"
                      
                      START_TIME=$(date +%s)
                      
                      # Run example with timeout (5 minutes per example)
                      if timeout 300 uv run python "$example"; then
                          END_TIME=$(date +%s)
                          DURATION=$((END_TIME - START_TIME))
                          DURATION_STR="${DURATION}s"
                          
                          echo "✓ PASSED: $example (${DURATION_STR})"
                          PASSED=$((PASSED + 1))
                          COMPLETED=$((COMPLETED + 1))
                          TEST_STATUS[$example]="✅ PASS"
                          TEST_DURATION[$example]="${DURATION_STR}"
                          echo "PASS|$example|${DURATION}" >> "$RESULTS_FILE"
                      else
                          EXIT_CODE=$?
                          END_TIME=$(date +%s)
                          DURATION=$((END_TIME - START_TIME))
                          DURATION_STR="${DURATION}s"
                          
                          echo "✗ FAILED: $example (exit code: $EXIT_CODE, ${DURATION_STR})"
                          FAILED=$((FAILED + 1))
                          COMPLETED=$((COMPLETED + 1))
                          FAILED_EXAMPLES+=("$example")
                          TEST_STATUS[$example]="❌ FAIL (exit: ${EXIT_CODE})"
                          TEST_DURATION[$example]="${DURATION_STR}"
                          echo "FAIL|$example|$EXIT_CODE|${DURATION}" >> "$RESULTS_FILE"
                      fi
                      
                      # Update PR comment after each test
                      echo "Updating PR comment..."
                      update_comment "$(generate_table)"
                  done

                  echo ""
                  echo "=========================================="
                  echo "Test Results Summary"
                  echo "=========================================="
                  echo "Total: ${#EXAMPLES[@]}"
                  echo "Passed: $PASSED"
                  echo "Failed: $FAILED"

                  if [ $FAILED -gt 0 ]; then
                      echo ""
                      echo "Failed examples:"
                      for failed_example in "${FAILED_EXAMPLES[@]}"; do
                          echo "  - $failed_example"
                      done
                      exit 1
                  fi

                  echo ""
                  echo "All examples passed! ✓"
