name: Run tests

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["**"]

permissions:
  contents: write
  pull-requests: write

jobs:
  sdk-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Detect sdk changes
        id: changed
        uses: tj-actions/changed-files@v44
        with:
          files: |
            openhands/sdk/**
            pyproject.toml
            uv.lock
            .github/workflows/tests.yml

      - name: Install uv
        if: steps.changed.outputs.any_changed == 'true'
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true

      - name: Install deps
        if: steps.changed.outputs.any_changed == 'true'
        run: uv sync --frozen --group dev

      - name: Run sdk tests with coverage
        if: steps.changed.outputs.any_changed == 'true'
        run: |
          CI=true uv run python -m pytest -vvs \
            --cov=openhands/sdk \
            --cov-report=term-missing \
            --cov-fail-under=0 \
            --cov-config=pyproject.toml \
            tests/sdk || true
          # Rename coverage file to avoid conflicts
          if [ -f .coverage ]; then
            mv .coverage .coverage.sdk
          fi

      - name: Check sdk coverage file
        if: steps.changed.outputs.any_changed == 'true' && always()
        run: |
          echo "Checking for coverage file..."
          echo "Current working directory: $(pwd)"
          echo "Directory structure:"
          find . -name ".coverage*" -type f 2>/dev/null || echo "No coverage files found with find"
          ls -la .coverage* 2>/dev/null || echo "No coverage files found with ls"
          if [ -f .coverage.sdk ]; then
            echo "SDK coverage file exists, size: $(stat -c%s .coverage.sdk) bytes"
            echo "Full path: $(realpath .coverage.sdk)"
            # Copy to a predictable location for upload
            cp .coverage.sdk coverage-sdk.dat
            echo "Copied to coverage-sdk.dat for upload"
            ls -la coverage-sdk.dat
          else
            echo "SDK coverage file does not exist"
          fi

      - name: Upload sdk coverage
        if: steps.changed.outputs.any_changed == 'true' && always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-sdk
          path: coverage-sdk.dat
          if-no-files-found: warn

  tools-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Detect tools changes
        id: changed
        uses: tj-actions/changed-files@v44
        with:
          files: |
            openhands/tools/**
            pyproject.toml
            uv.lock
            .github/workflows/tests.yml
      
      - name: Install uv
        if: steps.changed.outputs.any_changed == 'true'
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true

      - name: Install deps
        if: steps.changed.outputs.any_changed == 'true'
        run: uv sync --frozen --group dev

      - name: Run tools tests with coverage
        if: steps.changed.outputs.any_changed == 'true'
        run: |
          CI=true uv run python -m pytest -vvs \
            --cov=openhands/tools \
            --cov-report=term-missing \
            --cov-fail-under=0 \
            --cov-config=pyproject.toml \
            tests/tools || true
          # Rename coverage file to avoid conflicts
          if [ -f .coverage ]; then
            mv .coverage .coverage.tools
          fi

      - name: Check tools coverage file
        if: steps.changed.outputs.any_changed == 'true' && always()
        run: |
          echo "Checking for coverage file..."
          echo "Current working directory: $(pwd)"
          echo "Directory structure:"
          find . -name ".coverage*" -type f 2>/dev/null || echo "No coverage files found with find"
          ls -la .coverage* 2>/dev/null || echo "No coverage files found with ls"
          if [ -f .coverage.tools ]; then
            echo "Tools coverage file exists, size: $(stat -c%s .coverage.tools) bytes"
            echo "Full path: $(realpath .coverage.tools)"
            # Copy to a predictable location for upload
            cp .coverage.tools coverage-tools.dat
            echo "Copied to coverage-tools.dat for upload"
            ls -la coverage-tools.dat
          else
            echo "Tools coverage file does not exist"
          fi

      - name: Upload tools coverage
        if: steps.changed.outputs.any_changed == 'true' && always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-tools
          path: coverage-tools.dat
          if-no-files-found: warn

  integration-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Detect integration changes
        id: changed
        uses: tj-actions/changed-files@v44
        with:
          files: |
            tests/**
            openhands/**
            pyproject.toml
            uv.lock
            .github/workflows/tests.yml
      
      - name: Install uv
        if: steps.changed.outputs.any_changed == 'true'
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true

      - name: Install deps
        if: steps.changed.outputs.any_changed == 'true'
        run: uv sync --frozen --group dev

      - name: Run integration tests with coverage
        if: steps.changed.outputs.any_changed == 'true'
        run: |
          CI=true uv run python -m pytest -vvs \
            --basetemp="${{ runner.temp }}/pytest" \
            -o tmp_path_retention=none \
            -o tmp_path_retention_count=0 \
            --cov=openhands \
            --cov-report=term-missing \
            --cov-fail-under=0 \
            --cov-config=pyproject.toml \
            tests/integration || true
          # Rename coverage file to avoid conflicts
          if [ -f .coverage ]; then
            mv .coverage .coverage.integration
          fi

      - name: Check integration coverage file
        if: steps.changed.outputs.any_changed == 'true' && always()
        run: |
          echo "Checking for coverage file..."
          echo "Current working directory: $(pwd)"
          echo "Directory structure:"
          find . -name ".coverage*" -type f 2>/dev/null || echo "No coverage files found with find"
          ls -la .coverage* 2>/dev/null || echo "No coverage files found with ls"
          if [ -f .coverage.integration ]; then
            echo "Integration coverage file exists, size: $(stat -c%s .coverage.integration) bytes"
            echo "Full path: $(realpath .coverage.integration)"
            # Copy to a predictable location for upload
            cp .coverage.integration coverage-integration.dat
            echo "Copied to coverage-integration.dat for upload"
            ls -la coverage-integration.dat
          else
            echo "Integration coverage file does not exist"
          fi

      - name: Upload integration coverage
        if: steps.changed.outputs.any_changed == 'true' && always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-integration
          path: coverage-integration.dat
          if-no-files-found: warn

  coverage-report:
    runs-on: ubuntu-latest
    needs: [sdk-tests, tools-tests, integration-tests]
    if: always() && github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true

      - name: Install deps (for coverage CLI)
        run: uv sync --frozen --group dev

      - name: Download coverage artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./cov
        continue-on-error: true

      - name: Combine coverage data
        run: |
          shopt -s nullglob
          echo "Looking for coverage files..."
          find cov -name "*.dat" -type f || echo "No .dat files found"
          find cov -name ".coverage*" -type f || echo "No .coverage* files found"
          
          # Look for both old and new file patterns
          files=(cov/**/.coverage* cov/**/coverage-*.dat)
          if [ ${#files[@]} -eq 0 ]; then
            echo "No coverage files found; skipping combined report."
            exit 0
          fi
          
          echo "Found coverage files: ${files[@]}"
          
          # Rename .dat files back to .coverage format for coverage tool
          for file in "${files[@]}"; do
            if [[ "$file" == *coverage-sdk.dat ]]; then
              cp "$file" .coverage.sdk
              echo "Renamed $file to .coverage.sdk"
            elif [[ "$file" == *coverage-tools.dat ]]; then
              cp "$file" .coverage.tools
              echo "Renamed $file to .coverage.tools"
            elif [[ "$file" == *coverage-integration.dat ]]; then
              cp "$file" .coverage.integration
              echo "Renamed $file to .coverage.integration"
            else
              cp "$file" .
              echo "Copied $file to current directory"
            fi
          done
          
          uv run coverage combine
          uv run coverage xml -i -o coverage.xml
          uv run coverage report -m || true

      - name: Pytest coverage PR comment
        if: always()
        continue-on-error: true
        uses: MishaKav/pytest-coverage-comment@v1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          pytest-xml-coverage-path: coverage.xml
          title: Coverage Report
          create-new-comment: false
