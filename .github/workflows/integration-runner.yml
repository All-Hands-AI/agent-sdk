---
name: Run Integration Tests

on:
    # Use pull_request_target to access secrets even on fork PRs
    # This is safe because we only run when the 'integration-test' label is added by a maintainer
    pull_request_target:
        types:
            - labeled
            - synchronize
    workflow_dispatch:
        inputs:
            reason:
                description: Reason for manual trigger
                required: true
                default: ''
    schedule:
        - cron: 30 22 * * * # Runs at 10:30pm UTC every day

env:
    N_PROCESSES: 4 # Global configuration for number of parallel processes for evaluation

jobs:
    post-initial-comment:
        if: github.event_name == 'pull_request_target' && github.event.label.name == 'integration-test'
        runs-on: ubuntu-latest
        permissions:
            pull-requests: write
        steps:
            - name: Comment on PR
              uses: KeisukeYamashita/create-comment@v1
              with:
                  unique: false
                  comment: |
                      Hi! I started running the integration tests on your PR. You will receive a comment with the results shortly.

    run-integration-tests:
        # Security: Only run when 'integration-test' label is present, via workflow_dispatch, or on schedule
        # This prevents automatic execution on fork PRs without maintainer approval
        # For 'synchronize' events, check if the PR has the 'integration-test' label
        # Note: uses always() to run even when post-initial-comment is skipped (e.g., for workflow_dispatch)
        if: |
            always() && (
                github.event.label.name == 'integration-test' ||
                github.event_name == 'workflow_dispatch' ||
                github.event_name == 'schedule' ||
                (github.event_name == 'pull_request_target' && github.event.action == 'synchronize' && contains(github.event.pull_request.labels.*.name, 'integration-test'))
            )
        needs: [post-initial-comment]
        runs-on: blacksmith-4vcpu-ubuntu-2204
        permissions:
            contents: read
            id-token: write
            pull-requests: write
            issues: write
        strategy:
            matrix:
                python-version: ['3.12']
                job-config:
                    - name: Claude Sonnet 4.5
                      run-suffix: sonnet_run
                      llm-config:
                          model: litellm_proxy/claude-sonnet-4-5-20250929
                    - name: GPT-5 Mini 2025-08-07
                      run-suffix: gpt5_mini_run
                      llm-config:
                          model: litellm_proxy/gpt-5-mini-2025-08-07
                          temperature: 1.0
                    - name: Devstral Medium 2507
                      run-suffix: devstral_run
                      llm-config:
                          model: litellm_proxy/deepseek/deepseek-chat
        steps:
            # For pull_request_target: checkout fork PR code (requires explicit repository)
            - name: Checkout PR head (fork-safe)
              if: github.event_name == 'pull_request_target'
              uses: actions/checkout@v5
              with:
                  repository: ${{ github.event.pull_request.head.repo.full_name }}
                  ref: ${{ github.event.pull_request.head.sha }}
                  persist-credentials: false
                  fetch-depth: 1

            # For non-PR events (workflow_dispatch, schedule): checkout normally
            - name: Checkout repository (non-PR events)
              if: github.event_name != 'pull_request_target'
              uses: actions/checkout@v5

            - name: Install uv
              uses: astral-sh/setup-uv@v7
              with:
                  version: latest
                  python-version: ${{ matrix.python-version }}

            - name: Install Python dependencies using uv
              run: |
                  uv sync --dev
                  uv pip install pytest

      # Run integration test evaluation
            - name: Run integration test evaluation for ${{ matrix.job-config.name }}
              env:
                  LLM_CONFIG: ${{ toJson(matrix.job-config.llm-config) }}
                  LLM_API_KEY: ${{ secrets.LLM_API_KEY }}
                  LLM_BASE_URL: https://llm-proxy.app.all-hands.dev
              run: |
                  set -eo pipefail

                  AGENT_SDK_VERSION=$(git rev-parse --short HEAD)
                  EVAL_NOTE="${AGENT_SDK_VERSION}_${{ matrix.job-config.run-suffix }}"

                  uv run python tests/integration/run_infer.py \
                    --llm-config "$LLM_CONFIG" \
                    --num-workers $N_PROCESSES \
                    --eval-note "$EVAL_NOTE"

                  # get integration tests JSON results
                  RESULTS_FILE=$(find tests/integration/outputs/*${{ matrix.job-config.run-suffix }}* -name "results.json" -type f | head -n 1)
                  echo "RESULTS_FILE: $RESULTS_FILE"
                  if [ -f "$RESULTS_FILE" ]; then
                    echo "JSON_RESULTS_FILE=$RESULTS_FILE" >> $GITHUB_ENV
                  else
                    echo "JSON_RESULTS_FILE=" >> $GITHUB_ENV
                  fi

            - name: Wait a little bit
              run: sleep 10





            - name: Create archive of evaluation outputs
              run: |
                  TIMESTAMP=$(date +'%y-%m-%d-%H-%M')
                  cd tests/integration/outputs  # Change to the outputs directory
                  tar -czvf ../../../integration_tests_${{ matrix.job-config.run-suffix }}_${TIMESTAMP}.tar.gz *${{ matrix.job-config.run-suffix }}* # Include result directories for this model

            - name: Upload evaluation results as artifact
              uses: actions/upload-artifact@v5
              id: upload_results_artifact
              with:
                  name: integration-test-outputs-${{ matrix.job-config.run-suffix }}-${{ github.run_id }}-${{ github.run_attempt }}
                  path: integration_tests_${{ matrix.job-config.run-suffix }}_*.tar.gz

            - name: Save test results for consolidation
              run: |
                  # Copy the structured JSON results file for consolidation
                  mkdir -p test_results_summary

                  if [ -n "${{ env.JSON_RESULTS_FILE }}" ] && [ -f "${{ env.JSON_RESULTS_FILE }}" ]; then
                    # Copy the JSON results file directly
                    cp "${{ env.JSON_RESULTS_FILE }}" "test_results_summary/${{ matrix.job-config.run-suffix }}_results.json"
                    echo "✓ Copied JSON results file for consolidation"
                  else
                    echo "✗ No JSON results file found"
                    exit 1
                  fi

            - name: Upload test results summary
              uses: actions/upload-artifact@v5
              with:
                  name: test-results-${{ matrix.job-config.run-suffix }}
                  path: test_results_summary/${{ matrix.job-config.run-suffix }}_results.json

    consolidate-results:
        needs: run-integration-tests
        if: always() && (github.event.label.name == 'integration-test' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule')
        runs-on: blacksmith-2vcpu-ubuntu-2404
        permissions:
            contents: read
            pull-requests: write
            issues: write
        steps:
            - name: Checkout repository
              uses: actions/checkout@v5
              with:
                  # When using pull_request_target, explicitly checkout the PR branch
                  # This ensures we use the scripts from the actual PR code
                  ref: ${{ github.event.pull_request.head.sha || github.ref }}

            - name: Install uv
              uses: astral-sh/setup-uv@v7
              with:
                  version: latest
                  python-version: '3.12'

            - name: Install Python dependencies using uv
              run: |
                  uv sync --dev

            - name: Download all test results
              uses: actions/download-artifact@v6
              with:
                  pattern: test-results-*
                  merge-multiple: true
                  path: all_results

            - name: Download all integration test artifacts
              uses: actions/download-artifact@v6
              with:
                  pattern: integration-test-outputs-*
                  path: artifacts

            - name: Consolidate test results
              env:
                  EVENT_NAME: ${{ github.event_name }}
                  PR_NUMBER: ${{ github.event.pull_request.number }}
                  MANUAL_REASON: ${{ github.event.inputs.reason }}
                  COMMIT_SHA: ${{ github.sha }}
                  PYTHONPATH: ${{ github.workspace }}
                  GITHUB_SERVER_URL: ${{ github.server_url }}
                  GITHUB_REPOSITORY: ${{ github.repository }}
                  GITHUB_RUN_ID: ${{ github.run_id }}
              run: |
                  uv run python tests/integration/utils/consolidate_json_results.py \
                    --results-dir all_results \
                    --artifacts-dir artifacts \
                    --output-file consolidated_results.json

                  echo "Consolidated results generated successfully"

                  uv run python tests/integration/utils/generate_markdown_report.py \
                    --input-file consolidated_results.json \
                    --output-file consolidated_report.md

            - name: Upload consolidated report
              uses: actions/upload-artifact@v5
              with:
                  name: consolidated-report
                  path: consolidated_report.md

            - name: Create consolidated PR comment
              if: github.event_name == 'pull_request_target'
              run: |
                  COMMENT_BODY=$(cat consolidated_report.md)
                  # Use GitHub CLI to create comment with explicit PR number
                  echo "$COMMENT_BODY" | gh pr comment ${{ github.event.pull_request.number }} --body-file -
              env:
                  GH_TOKEN: ${{ github.token }}

            - name: Read consolidated report for tracker issue
              if: github.event_name == 'schedule'
              id: read_report
              run: |
                  # Read the report and set as output
                  REPORT_CONTENT=$(cat consolidated_report.md)
                  echo "report<<EOF" >> $GITHUB_OUTPUT
                  echo "$REPORT_CONTENT" >> $GITHUB_OUTPUT
                  echo "EOF" >> $GITHUB_OUTPUT

            - name: Comment with results on tracker issue
              if: github.event_name == 'schedule'
              uses: KeisukeYamashita/create-comment@v1
              with:
                  number: 939
                  unique: false
                  comment: |
                      **Trigger:** Nightly Scheduled Run
                      **Commit:** ${{ github.sha }}

                      ${{ steps.read_report.outputs.report }}

