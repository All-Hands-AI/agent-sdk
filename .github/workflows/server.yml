---
name: Agent Server

on:
    push:
        branches: [main]
        tags:
            - build-docker
    pull_request:
        branches: [main]
    workflow_dispatch:
        inputs:
            base_image:
                description: Base runtime image
                type: string
                default: nikolaik/python-nodejs:python3.12-nodejs22-slim
            image:
                description: GHCR image name
                type: string
                default: ghcr.io/all-hands-ai/agent-server
            platforms:
                description: Target platforms
                type: string
                default: linux/amd64,linux/arm64

permissions:
    contents: read
    packages: write

jobs:
    build-binary-and-test:
        runs-on: ${{ matrix.os }}
        strategy:
            matrix:
                os: [ubuntu-latest, macos-latest]
        steps:
            - uses: actions/checkout@v5

            - name: Install uv
              uses: astral-sh/setup-uv@v6
              with:
                  version: latest
            - name: Install dependencies
              run: uv sync --dev

            - name: Build binary
              run: |
                  make build-server

            # FIXME: windows-latest not working due to
            # Run if [[ "windows-latest" == "windows-latest" ]]; then
            # [PYI-2160:ERROR] Failed to load Python DLL 'C:\Users\RUNNER~1\AppData\Local\Temp\_MEI5602\python312.dll'.
            # LoadLibrary: Invalid access to memory location.
            # - name: Test binary (Windows)
            #   if: matrix.os == 'windows-latest'
            #   shell: pwsh
            #   run: |
            #       Get-ChildItem dist
            #       .\dist\openhands-agent-server.exe --help

            - name: Test binary (Linux and macOS)
              if: matrix.os != 'windows-latest'
              shell: bash
              run: |
                  ./dist/openhands-agent-server --help

            - name: Upload binary artifact
              uses: actions/upload-artifact@v4
              with:
                  name: openhands-server-${{ matrix.os }}
                  path: |
                      dist/openhands-server*
                  retention-days: 7

    check-openapi-schema:
        name: Check OpenAPI Schema
        runs-on: blacksmith-2vcpu-ubuntu-2404

        steps:
            - name: Checkout PR branch
              uses: actions/checkout@v5
              with:
                  ref: ${{ github.head_ref }}
                  fetch-depth: 0

            - name: Install uv
              uses: astral-sh/setup-uv@v6
              with:
                  version: latest

            - name: Install Node.js (for npx)
              uses: actions/setup-node@v5
              with:
                  node-version: 22


            - name: Install dependencies
              run: |
                  uv sync --frozen --dev

            - name: Check OpenAPI JSON and build client
              env:
                  PYTHONPATH: .
              run: |
                  make test-server-schema

    build-and-push-image:
        name: Build & Push
        # Run on all commits (push events and pull requests)
        if: >
            github.event_name == 'push' ||
            github.event_name == 'pull_request'
        strategy:
            fail-fast: false
            matrix:
                include:
                    # Python + Node.js variant
                    - name: python
                      runner: blacksmith-8vcpu-ubuntu-2404
                      platforms: linux/amd64,linux/arm64
                      base_image: nikolaik/python-nodejs:python3.12-nodejs22

                    # Java variant (OpenJDK base)
                    - name: java
                      runner: blacksmith-8vcpu-ubuntu-2404
                      platforms: linux/amd64,linux/arm64
                      base_image: eclipse-temurin:17-jdk

                    # Golang variant (Go base)
                    - name: golang
                      runner: blacksmith-8vcpu-ubuntu-2404
                      platforms: linux/amd64,linux/arm64
                      base_image: golang:1.21-bookworm

        runs-on: ${{ matrix.runner }}

        env:
            IMAGE: ${{ inputs.image != '' && inputs.image || 'ghcr.io/all-hands-ai/agent-server' }}
            BASE_IMAGE: ${{ inputs.base_image != '' && inputs.base_image || matrix.base_image }}
            VARIANT_NAME: ${{ matrix.name }}
            TARGET: binary
            PLATFORMS: ${{ matrix.platforms }}
            GITHUB_SHA: ${{ github.sha }}
            GITHUB_REF: ${{ github.ref }}
            CI: 'true'

        steps:
            - name: Checkout
              uses: actions/checkout@v5

            - name: Install uv
              uses: astral-sh/setup-uv@v6
              with:
                  version: latest

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3
              with:
                  driver-opts: network=host

            - name: Log in to GHCR
              uses: docker/login-action@v3
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Make build script executable
              run: chmod +x ./openhands/agent_server/docker/build.sh
              shell: bash

            - name: Build & Push (${{ matrix.name }})
              id: build
              run: |
                  uv sync --frozen
                  ./openhands/agent_server/docker/build.sh
              shell: bash

            - name: Summary (${{ matrix.name }}) - outputs
              run: |
                  echo "Image: ${{ steps.build.outputs.image }}"
                  echo "Short SHA: ${{ steps.build.outputs.short_sha }}"
                  echo "Versioned Tag: ${{ steps.build.outputs.versioned_tag }}"
                  echo "Multiline tags:"
                  echo "${{ steps.build.outputs.tags }}"

    consolidate-build-info:
        name: Consolidate Build Information
        needs: build-and-push-image
        if: github.event_name == 'pull_request' && needs.build-and-push-image.result == 'success'
        runs-on: blacksmith-2vcpu-ubuntu-2404
        outputs:
            image: ${{ steps.consolidate.outputs.image }}
            short_sha: ${{ steps.consolidate.outputs.short_sha }}
            ghcr_package_url: ${{ steps.consolidate.outputs.ghcr_package_url }}
            python_base_label: ${{ steps.consolidate.outputs.python_base_label }}
            python_base_url: ${{ steps.consolidate.outputs.python_base_url }}
            java_base_label: ${{ steps.consolidate.outputs.java_base_label }}
            java_base_url: ${{ steps.consolidate.outputs.java_base_url }}
            golang_base_label: ${{ steps.consolidate.outputs.golang_base_label }}
            golang_base_url: ${{ steps.consolidate.outputs.golang_base_url }}
            all_tags: ${{ steps.consolidate.outputs.all_tags }}
        steps:
            - name: Consolidate build information
              id: consolidate
              run: |
                  # Get the image and short_sha from the matrix results
                  # All variants use the same base image name and short_sha
                  IMAGE="ghcr.io/all-hands-ai/agent-server"
                  SHORT_SHA="${{ github.sha }}"
                  SHORT_SHA="${SHORT_SHA:0:7}"

                  # Set basic outputs
                  echo "image=${IMAGE}" >> $GITHUB_OUTPUT
                  echo "short_sha=${SHORT_SHA}" >> $GITHUB_OUTPUT
                  echo "ghcr_package_url=https://github.com/All-Hands-AI/agent-sdk/pkgs/container/agent-server" >> $GITHUB_OUTPUT

                  # Set base image information for each variant
                  echo "python_base_label=nikolaik/python-nodejs:python3.12-nodejs22" >> $GITHUB_OUTPUT
                  echo "python_base_url=https://hub.docker.com/r/nikolaik/python-nodejs" >> $GITHUB_OUTPUT
                  echo "java_base_label=eclipse-temurin:17-jdk" >> $GITHUB_OUTPUT
                  echo "java_base_url=https://hub.docker.com/_/eclipse-temurin" >> $GITHUB_OUTPUT
                  echo "golang_base_label=golang:1.21-bookworm" >> $GITHUB_OUTPUT
                  echo "golang_base_url=https://hub.docker.com/_/golang" >> $GITHUB_OUTPUT

                  # Collect all tags that would be generated for this build
                  # This is based on the logic in build.sh - only variant-specific tags are created
                  ALL_TAGS=""
                  for variant in python java golang; do
                      ALL_TAGS="${ALL_TAGS}${IMAGE}:${SHORT_SHA}-${variant}"$'\n'
                  done

                  # Remove trailing newline
                  ALL_TAGS="${ALL_TAGS%$'\n'}"

                  # Set the all_tags output using heredoc
                  {
                      echo 'all_tags<<EOF'
                      echo "${ALL_TAGS}"
                      echo 'EOF'
                  } >> $GITHUB_OUTPUT

    update-pr-description:
        name: Update PR description with agent server image
        needs: consolidate-build-info
        # Only on PRs, and only if the consolidation succeeded
        if: github.event_name == 'pull_request' && needs.consolidate-build-info.result == 'success'
        runs-on: blacksmith-2vcpu-ubuntu-2404
        permissions:
            contents: read
            pull-requests: write
        env:
            IMAGE: ${{ needs.consolidate-build-info.outputs.image }}
            SHORT_SHA: ${{ needs.consolidate-build-info.outputs.short_sha }}
            GHCR_PACKAGE_URL: ${{ needs.consolidate-build-info.outputs.ghcr_package_url }}
            PYTHON_BASE_LABEL: ${{ needs.consolidate-build-info.outputs.python_base_label }}
            PYTHON_BASE_URL: ${{ needs.consolidate-build-info.outputs.python_base_url }}
            JAVA_BASE_LABEL: ${{ needs.consolidate-build-info.outputs.java_base_label }}
            JAVA_BASE_URL: ${{ needs.consolidate-build-info.outputs.java_base_url }}
            GOLANG_BASE_LABEL: ${{ needs.consolidate-build-info.outputs.golang_base_label }}
            GOLANG_BASE_URL: ${{ needs.consolidate-build-info.outputs.golang_base_url }}
            ALL_TAGS: ${{ needs.consolidate-build-info.outputs.all_tags }}

        steps:
            - name: Update PR description with comprehensive docker information
              uses: nefrob/pr-description@v1.2.0
              with:
                  content: "\n---\n**Agent Server images for this PR**\n\n• **GHCR package:** ${{ env.GHCR_PACKAGE_URL }}\n\n**Variants & Base Images**\n\
                      | Variant | Base Image | Docs / Tags |\n|---|---|---|\n| python | `${{ env.PYTHON_BASE_LABEL }}` | [Link](${{ env.PYTHON_BASE_URL
                      }}) |\n| java   | `${{ env.JAVA_BASE_LABEL }}`   | [Link](${{ env.JAVA_BASE_URL }}) |\n| golang | `${{ env.GOLANG_BASE_LABEL }}` |
                      [Link](${{ env.GOLANG_BASE_URL }}) |\n\n**Pull (choose your variant)**\n```bash\n# Python variant (recommended for most use cases)\n\
                      docker pull ${{ env.IMAGE }}:${{ env.SHORT_SHA }}-python\n\n# Java variant\ndocker pull ${{ env.IMAGE }}:${{ env.SHORT_SHA }}-java\n\
                      \n# Golang variant\ndocker pull ${{ env.IMAGE }}:${{ env.SHORT_SHA }}-golang\n```\n\n**Run (example with python variant)**\n```bash\n\
                      docker run -it --rm \\\n  -p 8000:8000 \\\n  --name agent-server-${{ env.SHORT_SHA }} \\\n  ${{ env.IMAGE }}:${{ env.SHORT_SHA }}-python\n\
                      ```\n\n**All tags pushed for this build**\n```\n${{ env.ALL_TAGS }}\n```\n\n_Each variant tag is a multi-arch manifest (amd64/arm64);
                      your client pulls the right arch automatically._"
                  regex: "---\\s*\\*\\*Agent Server images? for this PR\\*\\*[\\s\\S]*?(?=\\n\\n---|\n\\n##|$)"
                  regexFlags: m
                  token: ${{ secrets.GITHUB_TOKEN }}
