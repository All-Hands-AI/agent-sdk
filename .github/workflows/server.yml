---
name: Agent Server

on:
    push:
        branches: [main]
    pull_request:
        branches: [main]
    workflow_dispatch:
        inputs:
            base_image:
                description: Base runtime image
                type: string
                default: nikolaik/python-nodejs:python3.12-nodejs22
            image:
                description: GHCR image name
                type: string
                default: ghcr.io/all-hands-ai/agent-server
            platforms:
                description: Target platforms
                type: string
                default: linux/amd64,linux/arm64

permissions:
    contents: read
    packages: write

jobs:
    build-binary-and-test:
        runs-on: ${{ matrix.os }}
        strategy:
            matrix:
                os: [ubuntu-latest, macos-latest]
        steps:
            - uses: actions/checkout@v5

            - name: Install uv
              uses: astral-sh/setup-uv@v6
              with:
                  version: latest
            - name: Install dependencies
              run: uv sync --dev

            - name: Build binary
              run: |
                  make build-server

            # FIXME: windows-latest not working due to
            # Run if [[ "windows-latest" == "windows-latest" ]]; then
            # [PYI-2160:ERROR] Failed to load Python DLL 'C:\Users\RUNNER~1\AppData\Local\Temp\_MEI5602\python312.dll'.
            # LoadLibrary: Invalid access to memory location.
            # - name: Test binary (Windows)
            #   if: matrix.os == 'windows-latest'
            #   shell: pwsh
            #   run: |
            #       Get-ChildItem dist
            #       .\dist\openhands-agent-server.exe --help

            - name: Test binary (Linux and macOS)
              if: matrix.os != 'windows-latest'
              shell: bash
              run: |
                  ./dist/openhands-agent-server --help

            - name: Upload binary artifact
              uses: actions/upload-artifact@v4
              with:
                  name: openhands-server-${{ matrix.os }}
                  path: |
                      dist/openhands-server*
                  retention-days: 7

    # check-openapi-schema:
    #     name: Check OpenAPI Schema
    #     if: github.event_name == 'pull_request'
    #     runs-on: ubuntu-latest

    #     steps:
    #         - name: Checkout PR branch
    #           uses: actions/checkout@v5
    #           with:
    #               ref: ${{ github.head_ref }}
    #               fetch-depth: 0

    #         - name: Install uv
    #           uses: astral-sh/setup-uv@v6
    #           with:
    #               version: latest

    #         - name: Install dependencies
    #           run: |
    #               uv sync --frozen --dev

    #         - name: Check OpenAPI JSON and build client
    #           shell: bash
    #           env:
    #               PYTHONPATH: .
    #           run: |
    #               set -euo pipefail
    #               export SCHEMA_PATH="$RUNNER_TEMP/openhands-openapi.json"

    #               # Generate OpenAPI JSON inline (no file left in repo)
    #               uv run python -c 'import os,json; from openhands.agent_server.api import api; p=os.environ["SCHEMA_PATH"]; open(p,"w").write(json.dumps(api.openapi(), indent=2)); print(f"Wrote {p}")'

    #               # Generate client from the temp schema and **fail on any warnings** to check
    #               uv run openapi-python-client generate \
    #                 --path "$SCHEMA_PATH" \
    #                 --output-path "$RUNNER_TEMP/openhands-client" \
    #                 --meta uv \
    #                 --overwrite \
    #                 --fail-on-warning

    #               # Clean up temp schema
    #               rm -f "$SCHEMA_PATH"

    build-and-push-image:
        name: Build & Push
        outputs:
            image: ${{ steps.meta.outputs.image }}
            short_sha: ${{ steps.meta.outputs.short_sha }}
            tags: ${{ steps.meta.outputs.tags }}
        strategy:
            fail-fast: false
            matrix:
                include:
                    - name: amd64
                      runner: blacksmith-8vcpu-ubuntu-2404
                      platforms: linux/amd64
                    - name: arm64
                      runner: blacksmith-8vcpu-ubuntu-2404-arm
                      platforms: linux/arm64

        runs-on: ${{ matrix.runner }}

        env:
            IMAGE: ${{ inputs.image != '' && inputs.image || 'ghcr.io/all-hands-ai/agent-server' }}
            BASE_IMAGE: ${{ inputs.base_image != '' && inputs.base_image || 'nikolaik/python-nodejs:python3.12-nodejs22' }}
            TARGET: binary

        steps:
            - name: Checkout
              uses: actions/checkout@v5

            - name: Install uv
              uses: astral-sh/setup-uv@v6
              with:
                  version: latest

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3
              with:
                  driver-opts: network=host

            - name: Log in to GHCR
              uses: docker/login-action@v3
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Get SDK version
              id: version
              run: |
                  uv sync --frozen
                  SDK_VERSION=$(uv run python -c "from importlib.metadata import version; print(version('openhands-sdk'))" 2>/dev/null || echo "0.0.0")
                  echo "sdk_version=${SDK_VERSION}" >> $GITHUB_OUTPUT
                  echo "SDK version: ${SDK_VERSION}"

            - name: Generate metadata
              id: meta
              run: |
                  # Git info
                  SHORT_SHA="${GITHUB_SHA:0:7}"
                  GIT_REF="${GITHUB_REF}"

                  # Base slug (keep legacy format so downstream tags don't change)
                  BASE_SLUG="$(echo -n "${{ env.BASE_IMAGE }}" | sed -e 's|/|_s_|g' -e 's|:|_tag_|g')"
                  VERSIONED_TAG="v${{ steps.version.outputs.sdk_version }}_${BASE_SLUG}"

                  # Generate tags
                  TAGS="${{ env.IMAGE }}:${SHORT_SHA},${{ env.IMAGE }}:${VERSIONED_TAG}"
                  if [[ "${GIT_REF}" == "refs/heads/main" ]]; then
                    TAGS="${TAGS},${{ env.IMAGE }}:latest"
                  fi

                  # Set outputs
                  echo "image=${{ env.IMAGE }}" >> $GITHUB_OUTPUT
                  echo "short_sha=${SHORT_SHA}" >> $GITHUB_OUTPUT
                  echo "versioned_tag=${VERSIONED_TAG}" >> $GITHUB_OUTPUT
                  echo "tags=${TAGS}" >> $GITHUB_OUTPUT

                  # Multi-line tags output
                  {
                    echo 'tags_multiline<<EOF'
                    echo "${TAGS}" | tr ',' '\n'
                    echo 'EOF'
                  } >> $GITHUB_OUTPUT

            - name: Build and push Docker image
              uses: docker/build-push-action@v6
              with:
                  context: .
                  file: ./openhands/agent_server/docker/Dockerfile
                  platforms: ${{ matrix.platforms }}
                  target: ${{ env.TARGET }}
                  push: true
                  tags: ${{ steps.meta.outputs.tags }}
                  build-args: |
                      BASE_IMAGE=${{ env.BASE_IMAGE }}
                  cache-from: type=gha
                  cache-to: type=gha,mode=max

            - name: Summary (${{ matrix.name }}) - outputs
              run: |
                  echo "Image: ${{ steps.meta.outputs.image }}"
                  echo "Short SHA: ${{ steps.meta.outputs.short_sha }}"
                  echo "Versioned Tag: ${{ steps.meta.outputs.versioned_tag }}"
                  echo "Tags: ${{ steps.meta.outputs.tags }}"
                  echo "Multiline tags:"
                  echo "${{ steps.meta.outputs.tags_multiline }}"

    post-image-comment:
        name: Post/Update PR image comment
        needs: build-and-push-image
        if: github.event_name == 'pull_request'
        runs-on: ubuntu-latest
        permissions:
            contents: read
            pull-requests: write
        env:
            IMAGE: ${{ needs.build-and-push-image.outputs.image }}
            SHORT_SHA: ${{ needs.build-and-push-image.outputs.short_sha }}

        steps:
            - name: Sticky PR comment with docker command
              uses: marocchino/sticky-pull-request-comment@v2
              with:
                  header: agent-server-image
                  recreate: true
                  message: |
                      **Agent Server image for this PR**

                      Pull (multi-arch manifest):
                      ```bash
                      docker pull ${{ env.IMAGE }}:${{ env.SHORT_SHA }}
                      ```

                      Run:
                      ```bash
                      docker run -it --rm \
                        -p 8000:8000 \
                        --name agent-server-${{ env.SHORT_SHA }} \
                        ${{ env.IMAGE }}:${{ env.SHORT_SHA }}
                      ```

                      _This tag is a multi-arch manifest (amd64/arm64). Your client pulls the right arch automatically._
