{
  "openapi": "3.1.0",
  "info": {
    "title": "OpenHands Agent Server",
    "description": "An HTTP server to create and manage AI agent conversations using the OpenHands SDK.",
    "version": "1.0.0"
  },
  "paths": {
    "/health": {
      "get": {
        "summary": "Health Check",
        "operationId": "health_check_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/conversations/": {
      "post": {
        "tags": [
          "conversations"
        ],
        "summary": "Start Conversation",
        "operationId": "start_conversation",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StartConversationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StartConversationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "conversations"
        ],
        "summary": "List Conversations",
        "description": "Lists active conversations with pagination.\nResults are returned in insertion order.",
        "operationId": "list_conversations",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "title": "Start"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListConversationsItem"
                  },
                  "title": "Response List Conversations"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/conversations/{conversation_id}": {
      "get": {
        "tags": [
          "conversations"
        ],
        "summary": "Get Conversation State",
        "operationId": "get_conversation_state",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "conversation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Conversation Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConversationState"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "conversations"
        ],
        "summary": "Close Conversation",
        "operationId": "close_conversation",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "conversation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Conversation Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/conversations/{conversation_id}/events": {
      "get": {
        "tags": [
          "conversations"
        ],
        "summary": "Get Events",
        "description": "Retrieves the event history for a conversation with pagination.",
        "operationId": "get_conversation_events",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "conversation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Conversation Id"
            }
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "title": "Start"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Unique event id (ULID/UUID)",
                            "title": "Id"
                          },
                          "timestamp": {
                            "type": "string",
                            "description": "Event timestamp",
                            "title": "Timestamp"
                          },
                          "source": {
                            "enum": [
                              "agent",
                              "user",
                              "environment"
                            ],
                            "type": "string",
                            "description": "The source of this event",
                            "title": "Source"
                          },
                          "kind": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Property to create kind field from class name when serializing.",
                            "title": "Kind"
                          },
                          "_du_spec": {
                            "anyOf": [
                              {
                                "type": "object",
                                "additionalProperties": true
                              },
                              {
                                "type": "null"
                              }
                            ],
                            "readOnly": true,
                            "description": "Optional compact spec for resilience:\n{\n    \"title\": \"QualifiedName\",\n    \"base\": \"QualifiedNameOfBaseClass\",\n    \"fields\": {\n    \"name\": {\"type\": \"str\", \"required\": True},\n    \"age\":  {\"type\": \"int\", \"required\": False, \"default\": 0}\n    }\n}\nOnly emitted if __include_du_spec__ is True.\n\nWe need this for MCPAction that are constructed on the fly\ne.g., if the MCP was created on the server side, clients may not\nhave access to schema via discriminator mapping.\nRead openhands/sdk/mcp/tool.py for more context.",
                            "title": "Du Spec"
                          }
                        },
                        "required": [
                          "source",
                          "kind",
                          "_du_spec"
                        ],
                        "title": "LLMConvertibleEvent",
                        "description": "Base class for events that can be converted to LLM messages.",
                        "additionalProperties": false
                      },
                      {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Unique event id (ULID/UUID)",
                            "title": "Id"
                          },
                          "timestamp": {
                            "type": "string",
                            "description": "Event timestamp",
                            "title": "Timestamp"
                          },
                          "source": {
                            "enum": [
                              "agent",
                              "user",
                              "environment"
                            ],
                            "type": "string",
                            "default": "environment",
                            "title": "Source"
                          },
                          "forgotten_event_ids": {
                            "anyOf": [
                              {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              },
                              {
                                "type": "null"
                              }
                            ],
                            "title": "Forgotten Event Ids"
                          },
                          "summary": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ],
                            "title": "Summary"
                          },
                          "summary_offset": {
                            "anyOf": [
                              {
                                "type": "integer"
                              },
                              {
                                "type": "null"
                              }
                            ],
                            "title": "Summary Offset"
                          },
                          "kind": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Property to create kind field from class name when serializing.",
                            "title": "Kind"
                          },
                          "_du_spec": {
                            "anyOf": [
                              {
                                "type": "object",
                                "additionalProperties": true
                              },
                              {
                                "type": "null"
                              }
                            ],
                            "readOnly": true,
                            "description": "Optional compact spec for resilience:\n{\n    \"title\": \"QualifiedName\",\n    \"base\": \"QualifiedNameOfBaseClass\",\n    \"fields\": {\n    \"name\": {\"type\": \"str\", \"required\": True},\n    \"age\":  {\"type\": \"int\", \"required\": False, \"default\": 0}\n    }\n}\nOnly emitted if __include_du_spec__ is True.\n\nWe need this for MCPAction that are constructed on the fly\ne.g., if the MCP was created on the server side, clients may not\nhave access to schema via discriminator mapping.\nRead openhands/sdk/mcp/tool.py for more context.",
                            "title": "Du Spec"
                          }
                        },
                        "required": [
                          "kind",
                          "_du_spec"
                        ],
                        "title": "Condensation",
                        "description": "This action indicates a condensation of the conversation history is happening.",
                        "additionalProperties": false
                      },
                      {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Unique event id (ULID/UUID)",
                            "title": "Id"
                          },
                          "timestamp": {
                            "type": "string",
                            "description": "Event timestamp",
                            "title": "Timestamp"
                          },
                          "source": {
                            "enum": [
                              "agent",
                              "user",
                              "environment"
                            ],
                            "type": "string",
                            "default": "environment",
                            "title": "Source"
                          },
                          "kind": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Property to create kind field from class name when serializing.",
                            "title": "Kind"
                          },
                          "_du_spec": {
                            "anyOf": [
                              {
                                "type": "object",
                                "additionalProperties": true
                              },
                              {
                                "type": "null"
                              }
                            ],
                            "readOnly": true,
                            "description": "Optional compact spec for resilience:\n{\n    \"title\": \"QualifiedName\",\n    \"base\": \"QualifiedNameOfBaseClass\",\n    \"fields\": {\n    \"name\": {\"type\": \"str\", \"required\": True},\n    \"age\":  {\"type\": \"int\", \"required\": False, \"default\": 0}\n    }\n}\nOnly emitted if __include_du_spec__ is True.\n\nWe need this for MCPAction that are constructed on the fly\ne.g., if the MCP was created on the server side, clients may not\nhave access to schema via discriminator mapping.\nRead openhands/sdk/mcp/tool.py for more context.",
                            "title": "Du Spec"
                          }
                        },
                        "required": [
                          "kind",
                          "_du_spec"
                        ],
                        "title": "CondensationRequest",
                        "description": "This action is used to request a condensation of the conversation history.\n\nAttributes:\n    action (str): The action type, namely ActionType.CONDENSATION_REQUEST.",
                        "additionalProperties": false
                      },
                      {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Unique event id (ULID/UUID)",
                            "title": "Id"
                          },
                          "timestamp": {
                            "type": "string",
                            "description": "Event timestamp",
                            "title": "Timestamp"
                          },
                          "source": {
                            "enum": [
                              "agent",
                              "user",
                              "environment"
                            ],
                            "type": "string",
                            "default": "agent",
                            "title": "Source"
                          },
                          "thought": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/TextContent"
                            },
                            "description": "The thought process of the agent before taking this action",
                            "title": "Thought"
                          },
                          "reasoning_content": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ],
                            "description": "Intermediate reasoning/thinking content from reasoning models",
                            "title": "Reasoning Content"
                          },
                          "action": {
                            "oneOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "security_risk": {
                                    "enum": [
                                      "LOW",
                                      "MEDIUM",
                                      "HIGH",
                                      "UNKNOWN"
                                    ],
                                    "type": "string",
                                    "default": "UNKNOWN",
                                    "description": "The LLM's assessment of the safety risk of this action.",
                                    "title": "Security Risk"
                                  },
                                  "message": {
                                    "type": "string",
                                    "description": "Final message to send to the user.",
                                    "title": "Message"
                                  },
                                  "kind": {
                                    "type": "string",
                                    "readOnly": true,
                                    "description": "Property to create kind field from class name when serializing.",
                                    "title": "Kind"
                                  },
                                  "_du_spec": {
                                    "anyOf": [
                                      {
                                        "type": "object",
                                        "additionalProperties": true
                                      },
                                      {
                                        "type": "null"
                                      }
                                    ],
                                    "readOnly": true,
                                    "description": "Optional compact spec for resilience:\n{\n    \"title\": \"QualifiedName\",\n    \"base\": \"QualifiedNameOfBaseClass\",\n    \"fields\": {\n    \"name\": {\"type\": \"str\", \"required\": True},\n    \"age\":  {\"type\": \"int\", \"required\": False, \"default\": 0}\n    }\n}\nOnly emitted if __include_du_spec__ is True.\n\nWe need this for MCPAction that are constructed on the fly\ne.g., if the MCP was created on the server side, clients may not\nhave access to schema via discriminator mapping.\nRead openhands/sdk/mcp/tool.py for more context.",
                                    "title": "Du Spec"
                                  }
                                },
                                "required": [
                                  "message",
                                  "kind",
                                  "_du_spec"
                                ],
                                "title": "FinishAction",
                                "additionalProperties": false
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "security_risk": {
                                    "enum": [
                                      "LOW",
                                      "MEDIUM",
                                      "HIGH",
                                      "UNKNOWN"
                                    ],
                                    "type": "string",
                                    "default": "UNKNOWN",
                                    "description": "The LLM's assessment of the safety risk of this action.",
                                    "title": "Security Risk"
                                  },
                                  "thought": {
                                    "type": "string",
                                    "description": "The thought to log.",
                                    "title": "Thought"
                                  },
                                  "kind": {
                                    "type": "string",
                                    "readOnly": true,
                                    "description": "Property to create kind field from class name when serializing.",
                                    "title": "Kind"
                                  },
                                  "_du_spec": {
                                    "anyOf": [
                                      {
                                        "type": "object",
                                        "additionalProperties": true
                                      },
                                      {
                                        "type": "null"
                                      }
                                    ],
                                    "readOnly": true,
                                    "description": "Optional compact spec for resilience:\n{\n    \"title\": \"QualifiedName\",\n    \"base\": \"QualifiedNameOfBaseClass\",\n    \"fields\": {\n    \"name\": {\"type\": \"str\", \"required\": True},\n    \"age\":  {\"type\": \"int\", \"required\": False, \"default\": 0}\n    }\n}\nOnly emitted if __include_du_spec__ is True.\n\nWe need this for MCPAction that are constructed on the fly\ne.g., if the MCP was created on the server side, clients may not\nhave access to schema via discriminator mapping.\nRead openhands/sdk/mcp/tool.py for more context.",
                                    "title": "Du Spec"
                                  }
                                },
                                "required": [
                                  "thought",
                                  "kind",
                                  "_du_spec"
                                ],
                                "title": "ThinkAction",
                                "description": "Action for logging a thought without making any changes.",
                                "additionalProperties": false
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "security_risk": {
                                    "enum": [
                                      "LOW",
                                      "MEDIUM",
                                      "HIGH",
                                      "UNKNOWN"
                                    ],
                                    "type": "string",
                                    "default": "UNKNOWN",
                                    "description": "The LLM's assessment of the safety risk of this action.",
                                    "title": "Security Risk"
                                  },
                                  "kind": {
                                    "type": "string",
                                    "readOnly": true,
                                    "description": "Property to create kind field from class name when serializing.",
                                    "title": "Kind"
                                  },
                                  "_du_spec": {
                                    "anyOf": [
                                      {
                                        "type": "object",
                                        "additionalProperties": true
                                      },
                                      {
                                        "type": "null"
                                      }
                                    ],
                                    "readOnly": true,
                                    "description": "Optional compact spec for resilience:\n{\n    \"title\": \"QualifiedName\",\n    \"base\": \"QualifiedNameOfBaseClass\",\n    \"fields\": {\n    \"name\": {\"type\": \"str\", \"required\": True},\n    \"age\":  {\"type\": \"int\", \"required\": False, \"default\": 0}\n    }\n}\nOnly emitted if __include_du_spec__ is True.\n\nWe need this for MCPAction that are constructed on the fly\ne.g., if the MCP was created on the server side, clients may not\nhave access to schema via discriminator mapping.\nRead openhands/sdk/mcp/tool.py for more context.",
                                    "title": "Du Spec"
                                  }
                                },
                                "required": [
                                  "kind",
                                  "_du_spec"
                                ],
                                "title": "MCPActionBase",
                                "description": "Base schema for MCP input action.",
                                "additionalProperties": true
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "security_risk": {
                                    "enum": [
                                      "LOW",
                                      "MEDIUM",
                                      "HIGH",
                                      "UNKNOWN"
                                    ],
                                    "type": "string",
                                    "default": "UNKNOWN",
                                    "description": "The LLM's assessment of the safety risk of this action.",
                                    "title": "Security Risk"
                                  },
                                  "command": {
                                    "type": "string",
                                    "description": "The bash command to execute. Can be empty string to view additional logs when previous exit code is `-1`. Can be `C-c` (Ctrl+C) to interrupt the currently running process. Note: You can only execute one bash command at a time. If you need to run multiple commands sequentially, you can use `&&` or `;` to chain them together.",
                                    "title": "Command"
                                  },
                                  "is_input": {
                                    "type": "boolean",
                                    "default": false,
                                    "description": "If True, the command is an input to the running process. If False, the command is a bash command to be executed in the terminal. Default is False.",
                                    "title": "Is Input"
                                  },
                                  "timeout": {
                                    "anyOf": [
                                      {
                                        "type": "number"
                                      },
                                      {
                                        "type": "null"
                                      }
                                    ],
                                    "description": "Optional. Sets a maximum time limit (in seconds) for running the command. If the command takes longer than this limit, you\u2019ll be asked whether to continue or stop it. If you don\u2019t set a value, the command will instead pause and ask for confirmation when it produces no new output for 30 seconds. Use a higher value if the command is expected to take a long time (like installation or testing), or if it has a known fixed duration (like sleep).",
                                    "title": "Timeout"
                                  },
                                  "kind": {
                                    "type": "string",
                                    "readOnly": true,
                                    "description": "Property to create kind field from class name when serializing.",
                                    "title": "Kind"
                                  },
                                  "_du_spec": {
                                    "anyOf": [
                                      {
                                        "type": "object",
                                        "additionalProperties": true
                                      },
                                      {
                                        "type": "null"
                                      }
                                    ],
                                    "readOnly": true,
                                    "description": "Optional compact spec for resilience:\n{\n    \"title\": \"QualifiedName\",\n    \"base\": \"QualifiedNameOfBaseClass\",\n    \"fields\": {\n    \"name\": {\"type\": \"str\", \"required\": True},\n    \"age\":  {\"type\": \"int\", \"required\": False, \"default\": 0}\n    }\n}\nOnly emitted if __include_du_spec__ is True.\n\nWe need this for MCPAction that are constructed on the fly\ne.g., if the MCP was created on the server side, clients may not\nhave access to schema via discriminator mapping.\nRead openhands/sdk/mcp/tool.py for more context.",
                                    "title": "Du Spec"
                                  }
                                },
                                "required": [
                                  "command",
                                  "kind",
                                  "_du_spec"
                                ],
                                "title": "ExecuteBashAction",
                                "description": "Schema for bash command execution.",
                                "additionalProperties": false
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "security_risk": {
                                    "enum": [
                                      "LOW",
                                      "MEDIUM",
                                      "HIGH",
                                      "UNKNOWN"
                                    ],
                                    "type": "string",
                                    "default": "UNKNOWN",
                                    "description": "The LLM's assessment of the safety risk of this action.",
                                    "title": "Security Risk"
                                  },
                                  "command": {
                                    "enum": [
                                      "view",
                                      "create",
                                      "str_replace",
                                      "insert",
                                      "undo_edit"
                                    ],
                                    "type": "string",
                                    "description": "The commands to run. Allowed options are: `view`, `create`, `str_replace`, `insert`, `undo_edit`.",
                                    "title": "Command"
                                  },
                                  "path": {
                                    "type": "string",
                                    "description": "Absolute path to file or directory, e.g. `/workspace/file.py` or `/workspace`.",
                                    "title": "Path"
                                  },
                                  "file_text": {
                                    "anyOf": [
                                      {
                                        "type": "string"
                                      },
                                      {
                                        "type": "null"
                                      }
                                    ],
                                    "description": "Required parameter of `create` command, with the content of the file to be created.",
                                    "title": "File Text"
                                  },
                                  "old_str": {
                                    "anyOf": [
                                      {
                                        "type": "string"
                                      },
                                      {
                                        "type": "null"
                                      }
                                    ],
                                    "description": "Required parameter of `str_replace` command containing the string in `path` to replace.",
                                    "title": "Old Str"
                                  },
                                  "new_str": {
                                    "anyOf": [
                                      {
                                        "type": "string"
                                      },
                                      {
                                        "type": "null"
                                      }
                                    ],
                                    "description": "Optional parameter of `str_replace` command containing the new string (if not given, no string will be added). Required parameter of `insert` command containing the string to insert.",
                                    "title": "New Str"
                                  },
                                  "insert_line": {
                                    "anyOf": [
                                      {
                                        "type": "integer"
                                      },
                                      {
                                        "type": "null"
                                      }
                                    ],
                                    "description": "Required parameter of `insert` command. The `new_str` will be inserted AFTER the line `insert_line` of `path`.",
                                    "title": "Insert Line"
                                  },
                                  "view_range": {
                                    "anyOf": [
                                      {
                                        "type": "array",
                                        "items": {
                                          "type": "integer"
                                        }
                                      },
                                      {
                                        "type": "null"
                                      }
                                    ],
                                    "description": "Optional parameter of `view` command when `path` points to a file. If none is given, the full file is shown. If provided, the file will be shown in the indicated line number range, e.g. [11, 12] will show lines 11 and 12. Indexing at 1 to start. Setting `[start_line, -1]` shows all lines from `start_line` to the end of the file.",
                                    "title": "View Range"
                                  },
                                  "kind": {
                                    "type": "string",
                                    "readOnly": true,
                                    "description": "Property to create kind field from class name when serializing.",
                                    "title": "Kind"
                                  },
                                  "_du_spec": {
                                    "anyOf": [
                                      {
                                        "type": "object",
                                        "additionalProperties": true
                                      },
                                      {
                                        "type": "null"
                                      }
                                    ],
                                    "readOnly": true,
                                    "description": "Optional compact spec for resilience:\n{\n    \"title\": \"QualifiedName\",\n    \"base\": \"QualifiedNameOfBaseClass\",\n    \"fields\": {\n    \"name\": {\"type\": \"str\", \"required\": True},\n    \"age\":  {\"type\": \"int\", \"required\": False, \"default\": 0}\n    }\n}\nOnly emitted if __include_du_spec__ is True.\n\nWe need this for MCPAction that are constructed on the fly\ne.g., if the MCP was created on the server side, clients may not\nhave access to schema via discriminator mapping.\nRead openhands/sdk/mcp/tool.py for more context.",
                                    "title": "Du Spec"
                                  }
                                },
                                "required": [
                                  "command",
                                  "path",
                                  "kind",
                                  "_du_spec"
                                ],
                                "title": "StrReplaceEditorAction",
                                "description": "Schema for string replace editor operations.",
                                "additionalProperties": false
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "security_risk": {
                                    "enum": [
                                      "LOW",
                                      "MEDIUM",
                                      "HIGH",
                                      "UNKNOWN"
                                    ],
                                    "type": "string",
                                    "default": "UNKNOWN",
                                    "description": "The LLM's assessment of the safety risk of this action.",
                                    "title": "Security Risk"
                                  },
                                  "command": {
                                    "enum": [
                                      "view",
                                      "plan"
                                    ],
                                    "type": "string",
                                    "default": "view",
                                    "description": "The command to execute. `view` shows the current task list. `plan` creates or updates the task list based on provided requirements and progress. Always `view` the current list before making changes.",
                                    "title": "Command"
                                  },
                                  "task_list": {
                                    "type": "array",
                                    "items": {
                                      "$ref": "#/components/schemas/TaskItem"
                                    },
                                    "description": "The full task list. Required parameter of `plan` command.",
                                    "title": "Task List"
                                  },
                                  "kind": {
                                    "type": "string",
                                    "readOnly": true,
                                    "description": "Property to create kind field from class name when serializing.",
                                    "title": "Kind"
                                  },
                                  "_du_spec": {
                                    "anyOf": [
                                      {
                                        "type": "object",
                                        "additionalProperties": true
                                      },
                                      {
                                        "type": "null"
                                      }
                                    ],
                                    "readOnly": true,
                                    "description": "Optional compact spec for resilience:\n{\n    \"title\": \"QualifiedName\",\n    \"base\": \"QualifiedNameOfBaseClass\",\n    \"fields\": {\n    \"name\": {\"type\": \"str\", \"required\": True},\n    \"age\":  {\"type\": \"int\", \"required\": False, \"default\": 0}\n    }\n}\nOnly emitted if __include_du_spec__ is True.\n\nWe need this for MCPAction that are constructed on the fly\ne.g., if the MCP was created on the server side, clients may not\nhave access to schema via discriminator mapping.\nRead openhands/sdk/mcp/tool.py for more context.",
                                    "title": "Du Spec"
                                  }
                                },
                                "required": [
                                  "kind",
                                  "_du_spec"
                                ],
                                "title": "TaskTrackerAction",
                                "description": "An action where the agent writes or updates a task list for task management.",
                                "additionalProperties": false
                              }
                            ],
                            "discriminator": {
                              "propertyName": "kind"
                            },
                            "description": "Single action (tool call) returned by LLM",
                            "title": "Action"
                          },
                          "tool_name": {
                            "type": "string",
                            "description": "The name of the tool being called",
                            "title": "Tool Name"
                          },
                          "tool_call_id": {
                            "type": "string",
                            "description": "The unique id returned by LLM API for this tool call",
                            "title": "Tool Call Id"
                          },
                          "tool_call": {
                            "$ref": "#/components/schemas/ChatCompletionMessageToolCall",
                            "description": "The tool call received from the LLM response. We keep a copy of it so it is easier to construct it into LLM message"
                          },
                          "llm_response_id": {
                            "type": "string",
                            "description": "Groups related actions from same LLM response. This helps in tracking and managing results of parallel function calling from the same LLM response.",
                            "title": "Llm Response Id"
                          },
                          "metrics": {
                            "anyOf": [
                              {
                                "$ref": "#/components/schemas/MetricsSnapshot"
                              },
                              {
                                "type": "null"
                              }
                            ],
                            "description": "Snapshot of LLM metrics (token counts and costs). Only attached to the last action when multiple actions share the same LLM response."
                          },
                          "kind": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Property to create kind field from class name when serializing.",
                            "title": "Kind"
                          },
                          "_du_spec": {
                            "anyOf": [
                              {
                                "type": "object",
                                "additionalProperties": true
                              },
                              {
                                "type": "null"
                              }
                            ],
                            "readOnly": true,
                            "description": "Optional compact spec for resilience:\n{\n    \"title\": \"QualifiedName\",\n    \"base\": \"QualifiedNameOfBaseClass\",\n    \"fields\": {\n    \"name\": {\"type\": \"str\", \"required\": True},\n    \"age\":  {\"type\": \"int\", \"required\": False, \"default\": 0}\n    }\n}\nOnly emitted if __include_du_spec__ is True.\n\nWe need this for MCPAction that are constructed on the fly\ne.g., if the MCP was created on the server side, clients may not\nhave access to schema via discriminator mapping.\nRead openhands/sdk/mcp/tool.py for more context.",
                            "title": "Du Spec"
                          }
                        },
                        "required": [
                          "thought",
                          "action",
                          "tool_name",
                          "tool_call_id",
                          "tool_call",
                          "llm_response_id",
                          "kind",
                          "_du_spec"
                        ],
                        "title": "ActionEvent",
                        "additionalProperties": false
                      },
                      {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Unique event id (ULID/UUID)",
                            "title": "Id"
                          },
                          "timestamp": {
                            "type": "string",
                            "description": "Event timestamp",
                            "title": "Timestamp"
                          },
                          "source": {
                            "enum": [
                              "agent",
                              "user",
                              "environment"
                            ],
                            "type": "string",
                            "default": "agent",
                            "title": "Source"
                          },
                          "error": {
                            "type": "string",
                            "description": "The error message from the scaffold",
                            "title": "Error"
                          },
                          "metrics": {
                            "anyOf": [
                              {
                                "$ref": "#/components/schemas/MetricsSnapshot"
                              },
                              {
                                "type": "null"
                              }
                            ],
                            "description": "Snapshot of LLM metrics (token counts and costs). Only attached to the last action when multiple actions share the same LLM response."
                          },
                          "kind": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Property to create kind field from class name when serializing.",
                            "title": "Kind"
                          },
                          "_du_spec": {
                            "anyOf": [
                              {
                                "type": "object",
                                "additionalProperties": true
                              },
                              {
                                "type": "null"
                              }
                            ],
                            "readOnly": true,
                            "description": "Optional compact spec for resilience:\n{\n    \"title\": \"QualifiedName\",\n    \"base\": \"QualifiedNameOfBaseClass\",\n    \"fields\": {\n    \"name\": {\"type\": \"str\", \"required\": True},\n    \"age\":  {\"type\": \"int\", \"required\": False, \"default\": 0}\n    }\n}\nOnly emitted if __include_du_spec__ is True.\n\nWe need this for MCPAction that are constructed on the fly\ne.g., if the MCP was created on the server side, clients may not\nhave access to schema via discriminator mapping.\nRead openhands/sdk/mcp/tool.py for more context.",
                            "title": "Du Spec"
                          }
                        },
                        "required": [
                          "error",
                          "kind",
                          "_du_spec"
                        ],
                        "title": "AgentErrorEvent",
                        "description": "Error triggered by the agent.\n\nNote: This event should not contain model \"thought\" or \"reasoning_content\". It\nrepresents an error produced by the agent/scaffold, not model output.",
                        "additionalProperties": false
                      },
                      {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Unique event id (ULID/UUID)",
                            "title": "Id"
                          },
                          "timestamp": {
                            "type": "string",
                            "description": "Event timestamp",
                            "title": "Timestamp"
                          },
                          "source": {
                            "enum": [
                              "agent",
                              "user",
                              "environment"
                            ],
                            "type": "string",
                            "title": "Source"
                          },
                          "llm_message": {
                            "$ref": "#/components/schemas/Message",
                            "description": "The exact LLM message for this message event"
                          },
                          "metrics": {
                            "anyOf": [
                              {
                                "$ref": "#/components/schemas/MetricsSnapshot"
                              },
                              {
                                "type": "null"
                              }
                            ],
                            "description": "Snapshot of LLM metrics (token counts and costs) for this message. Only attached to messages from agent."
                          },
                          "activated_microagents": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "description": "List of activated microagent name",
                            "title": "Activated Microagents"
                          },
                          "extended_content": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/TextContent"
                            },
                            "description": "List of content added by agent context",
                            "title": "Extended Content"
                          },
                          "kind": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Property to create kind field from class name when serializing.",
                            "title": "Kind"
                          },
                          "_du_spec": {
                            "anyOf": [
                              {
                                "type": "object",
                                "additionalProperties": true
                              },
                              {
                                "type": "null"
                              }
                            ],
                            "readOnly": true,
                            "description": "Optional compact spec for resilience:\n{\n    \"title\": \"QualifiedName\",\n    \"base\": \"QualifiedNameOfBaseClass\",\n    \"fields\": {\n    \"name\": {\"type\": \"str\", \"required\": True},\n    \"age\":  {\"type\": \"int\", \"required\": False, \"default\": 0}\n    }\n}\nOnly emitted if __include_du_spec__ is True.\n\nWe need this for MCPAction that are constructed on the fly\ne.g., if the MCP was created on the server side, clients may not\nhave access to schema via discriminator mapping.\nRead openhands/sdk/mcp/tool.py for more context.",
                            "title": "Du Spec"
                          },
                          "reasoning_content": {
                            "type": "string",
                            "readOnly": true,
                            "title": "Reasoning Content"
                          }
                        },
                        "required": [
                          "source",
                          "llm_message",
                          "kind",
                          "_du_spec",
                          "reasoning_content"
                        ],
                        "title": "MessageEvent",
                        "description": "Message from either agent or user.\n\nThis is originally the \"MessageAction\", but it suppose not to be tool call."
                      },
                      {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Unique event id (ULID/UUID)",
                            "title": "Id"
                          },
                          "timestamp": {
                            "type": "string",
                            "description": "Event timestamp",
                            "title": "Timestamp"
                          },
                          "source": {
                            "enum": [
                              "agent",
                              "user",
                              "environment"
                            ],
                            "type": "string",
                            "default": "environment",
                            "title": "Source"
                          },
                          "observation": {
                            "oneOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "content": {
                                    "type": "array",
                                    "items": {
                                      "anyOf": [
                                        {
                                          "$ref": "#/components/schemas/TextContent"
                                        },
                                        {
                                          "$ref": "#/components/schemas/ImageContent"
                                        }
                                      ]
                                    },
                                    "description": "Content returned from the MCP tool converted to LLM Ready TextContent or ImageContent",
                                    "title": "Content"
                                  },
                                  "is_error": {
                                    "type": "boolean",
                                    "default": false,
                                    "description": "Whether the call resulted in an error",
                                    "title": "Is Error"
                                  },
                                  "tool_name": {
                                    "type": "string",
                                    "description": "Name of the tool that was called",
                                    "title": "Tool Name"
                                  },
                                  "kind": {
                                    "type": "string",
                                    "readOnly": true,
                                    "description": "Property to create kind field from class name when serializing.",
                                    "title": "Kind"
                                  },
                                  "_du_spec": {
                                    "anyOf": [
                                      {
                                        "type": "object",
                                        "additionalProperties": true
                                      },
                                      {
                                        "type": "null"
                                      }
                                    ],
                                    "readOnly": true,
                                    "description": "Optional compact spec for resilience:\n{\n    \"title\": \"QualifiedName\",\n    \"base\": \"QualifiedNameOfBaseClass\",\n    \"fields\": {\n    \"name\": {\"type\": \"str\", \"required\": True},\n    \"age\":  {\"type\": \"int\", \"required\": False, \"default\": 0}\n    }\n}\nOnly emitted if __include_du_spec__ is True.\n\nWe need this for MCPAction that are constructed on the fly\ne.g., if the MCP was created on the server side, clients may not\nhave access to schema via discriminator mapping.\nRead openhands/sdk/mcp/tool.py for more context.",
                                    "title": "Du Spec"
                                  }
                                },
                                "required": [
                                  "tool_name",
                                  "kind",
                                  "_du_spec"
                                ],
                                "title": "MCPToolObservation",
                                "description": "Observation from MCP tool execution.",
                                "additionalProperties": true
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "message": {
                                    "type": "string",
                                    "description": "Final message sent to the user.",
                                    "title": "Message"
                                  },
                                  "kind": {
                                    "type": "string",
                                    "readOnly": true,
                                    "description": "Property to create kind field from class name when serializing.",
                                    "title": "Kind"
                                  },
                                  "_du_spec": {
                                    "anyOf": [
                                      {
                                        "type": "object",
                                        "additionalProperties": true
                                      },
                                      {
                                        "type": "null"
                                      }
                                    ],
                                    "readOnly": true,
                                    "description": "Optional compact spec for resilience:\n{\n    \"title\": \"QualifiedName\",\n    \"base\": \"QualifiedNameOfBaseClass\",\n    \"fields\": {\n    \"name\": {\"type\": \"str\", \"required\": True},\n    \"age\":  {\"type\": \"int\", \"required\": False, \"default\": 0}\n    }\n}\nOnly emitted if __include_du_spec__ is True.\n\nWe need this for MCPAction that are constructed on the fly\ne.g., if the MCP was created on the server side, clients may not\nhave access to schema via discriminator mapping.\nRead openhands/sdk/mcp/tool.py for more context.",
                                    "title": "Du Spec"
                                  }
                                },
                                "required": [
                                  "message",
                                  "kind",
                                  "_du_spec"
                                ],
                                "title": "FinishObservation",
                                "additionalProperties": true
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "content": {
                                    "type": "string",
                                    "default": "Your thought has been logged.",
                                    "description": "Confirmation message.",
                                    "title": "Content"
                                  },
                                  "kind": {
                                    "type": "string",
                                    "readOnly": true,
                                    "description": "Property to create kind field from class name when serializing.",
                                    "title": "Kind"
                                  },
                                  "_du_spec": {
                                    "anyOf": [
                                      {
                                        "type": "object",
                                        "additionalProperties": true
                                      },
                                      {
                                        "type": "null"
                                      }
                                    ],
                                    "readOnly": true,
                                    "description": "Optional compact spec for resilience:\n{\n    \"title\": \"QualifiedName\",\n    \"base\": \"QualifiedNameOfBaseClass\",\n    \"fields\": {\n    \"name\": {\"type\": \"str\", \"required\": True},\n    \"age\":  {\"type\": \"int\", \"required\": False, \"default\": 0}\n    }\n}\nOnly emitted if __include_du_spec__ is True.\n\nWe need this for MCPAction that are constructed on the fly\ne.g., if the MCP was created on the server side, clients may not\nhave access to schema via discriminator mapping.\nRead openhands/sdk/mcp/tool.py for more context.",
                                    "title": "Du Spec"
                                  }
                                },
                                "required": [
                                  "kind",
                                  "_du_spec"
                                ],
                                "title": "ThinkObservation",
                                "description": "Observation returned after logging a thought.",
                                "additionalProperties": true
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "output": {
                                    "type": "string",
                                    "description": "The raw output from the tool.",
                                    "title": "Output"
                                  },
                                  "command": {
                                    "anyOf": [
                                      {
                                        "type": "string"
                                      },
                                      {
                                        "type": "null"
                                      }
                                    ],
                                    "description": "The bash command that was executed. Can be empty string if the observation is from a previous command that hit soft timeout and is not yet finished.",
                                    "title": "Command"
                                  },
                                  "exit_code": {
                                    "anyOf": [
                                      {
                                        "type": "integer"
                                      },
                                      {
                                        "type": "null"
                                      }
                                    ],
                                    "description": "The exit code of the command. -1 indicates the process hit the soft timeout and is not yet finished.",
                                    "title": "Exit Code"
                                  },
                                  "error": {
                                    "type": "boolean",
                                    "default": false,
                                    "description": "Whether there was an error during command execution.",
                                    "title": "Error"
                                  },
                                  "timeout": {
                                    "type": "boolean",
                                    "default": false,
                                    "description": "Whether the command execution timed out.",
                                    "title": "Timeout"
                                  },
                                  "metadata": {
                                    "$ref": "#/components/schemas/CmdOutputMetadata",
                                    "description": "Additional metadata captured from PS1 after command execution."
                                  },
                                  "kind": {
                                    "type": "string",
                                    "readOnly": true,
                                    "description": "Property to create kind field from class name when serializing.",
                                    "title": "Kind"
                                  },
                                  "_du_spec": {
                                    "anyOf": [
                                      {
                                        "type": "object",
                                        "additionalProperties": true
                                      },
                                      {
                                        "type": "null"
                                      }
                                    ],
                                    "readOnly": true,
                                    "description": "Optional compact spec for resilience:\n{\n    \"title\": \"QualifiedName\",\n    \"base\": \"QualifiedNameOfBaseClass\",\n    \"fields\": {\n    \"name\": {\"type\": \"str\", \"required\": True},\n    \"age\":  {\"type\": \"int\", \"required\": False, \"default\": 0}\n    }\n}\nOnly emitted if __include_du_spec__ is True.\n\nWe need this for MCPAction that are constructed on the fly\ne.g., if the MCP was created on the server side, clients may not\nhave access to schema via discriminator mapping.\nRead openhands/sdk/mcp/tool.py for more context.",
                                    "title": "Du Spec"
                                  }
                                },
                                "required": [
                                  "output",
                                  "kind",
                                  "_du_spec"
                                ],
                                "title": "ExecuteBashObservation",
                                "description": "A ToolResult that can be rendered as a CLI output.",
                                "additionalProperties": true
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "command": {
                                    "enum": [
                                      "view",
                                      "create",
                                      "str_replace",
                                      "insert",
                                      "undo_edit"
                                    ],
                                    "type": "string",
                                    "description": "The commands to run. Allowed options are: `view`, `create`, `str_replace`, `insert`, `undo_edit`.",
                                    "title": "Command"
                                  },
                                  "output": {
                                    "type": "string",
                                    "default": "",
                                    "description": "The output message from the tool for the LLM to see.",
                                    "title": "Output"
                                  },
                                  "path": {
                                    "anyOf": [
                                      {
                                        "type": "string"
                                      },
                                      {
                                        "type": "null"
                                      }
                                    ],
                                    "description": "The file path that was edited.",
                                    "title": "Path"
                                  },
                                  "prev_exist": {
                                    "type": "boolean",
                                    "default": true,
                                    "description": "Indicates if the file previously existed. If not, it was created.",
                                    "title": "Prev Exist"
                                  },
                                  "old_content": {
                                    "anyOf": [
                                      {
                                        "type": "string"
                                      },
                                      {
                                        "type": "null"
                                      }
                                    ],
                                    "description": "The content of the file before the edit.",
                                    "title": "Old Content"
                                  },
                                  "new_content": {
                                    "anyOf": [
                                      {
                                        "type": "string"
                                      },
                                      {
                                        "type": "null"
                                      }
                                    ],
                                    "description": "The content of the file after the edit.",
                                    "title": "New Content"
                                  },
                                  "error": {
                                    "anyOf": [
                                      {
                                        "type": "string"
                                      },
                                      {
                                        "type": "null"
                                      }
                                    ],
                                    "description": "Error message if any.",
                                    "title": "Error"
                                  },
                                  "kind": {
                                    "type": "string",
                                    "readOnly": true,
                                    "description": "Property to create kind field from class name when serializing.",
                                    "title": "Kind"
                                  },
                                  "_du_spec": {
                                    "anyOf": [
                                      {
                                        "type": "object",
                                        "additionalProperties": true
                                      },
                                      {
                                        "type": "null"
                                      }
                                    ],
                                    "readOnly": true,
                                    "description": "Optional compact spec for resilience:\n{\n    \"title\": \"QualifiedName\",\n    \"base\": \"QualifiedNameOfBaseClass\",\n    \"fields\": {\n    \"name\": {\"type\": \"str\", \"required\": True},\n    \"age\":  {\"type\": \"int\", \"required\": False, \"default\": 0}\n    }\n}\nOnly emitted if __include_du_spec__ is True.\n\nWe need this for MCPAction that are constructed on the fly\ne.g., if the MCP was created on the server side, clients may not\nhave access to schema via discriminator mapping.\nRead openhands/sdk/mcp/tool.py for more context.",
                                    "title": "Du Spec"
                                  }
                                },
                                "required": [
                                  "command",
                                  "kind",
                                  "_du_spec"
                                ],
                                "title": "StrReplaceEditorObservation",
                                "description": "A ToolResult that can be rendered as a CLI output.",
                                "additionalProperties": true
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "content": {
                                    "type": "string",
                                    "default": "",
                                    "description": "The formatted task list or status message",
                                    "title": "Content"
                                  },
                                  "command": {
                                    "type": "string",
                                    "default": "",
                                    "description": "The command that was executed",
                                    "title": "Command"
                                  },
                                  "task_list": {
                                    "type": "array",
                                    "items": {
                                      "$ref": "#/components/schemas/TaskItem"
                                    },
                                    "description": "The current task list",
                                    "title": "Task List"
                                  },
                                  "kind": {
                                    "type": "string",
                                    "readOnly": true,
                                    "description": "Property to create kind field from class name when serializing.",
                                    "title": "Kind"
                                  },
                                  "_du_spec": {
                                    "anyOf": [
                                      {
                                        "type": "object",
                                        "additionalProperties": true
                                      },
                                      {
                                        "type": "null"
                                      }
                                    ],
                                    "readOnly": true,
                                    "description": "Optional compact spec for resilience:\n{\n    \"title\": \"QualifiedName\",\n    \"base\": \"QualifiedNameOfBaseClass\",\n    \"fields\": {\n    \"name\": {\"type\": \"str\", \"required\": True},\n    \"age\":  {\"type\": \"int\", \"required\": False, \"default\": 0}\n    }\n}\nOnly emitted if __include_du_spec__ is True.\n\nWe need this for MCPAction that are constructed on the fly\ne.g., if the MCP was created on the server side, clients may not\nhave access to schema via discriminator mapping.\nRead openhands/sdk/mcp/tool.py for more context.",
                                    "title": "Du Spec"
                                  }
                                },
                                "required": [
                                  "kind",
                                  "_du_spec"
                                ],
                                "title": "TaskTrackerObservation",
                                "description": "This data class represents the result of a task tracking operation.",
                                "additionalProperties": true
                              }
                            ],
                            "discriminator": {
                              "propertyName": "kind"
                            },
                            "description": "The observation (tool call) sent to LLM",
                            "title": "Observation"
                          },
                          "action_id": {
                            "type": "string",
                            "description": "The action id that this observation is responding to",
                            "title": "Action Id"
                          },
                          "tool_name": {
                            "type": "string",
                            "description": "The tool name that this observation is responding to",
                            "title": "Tool Name"
                          },
                          "tool_call_id": {
                            "type": "string",
                            "description": "The tool call id that this observation is responding to",
                            "title": "Tool Call Id"
                          },
                          "kind": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Property to create kind field from class name when serializing.",
                            "title": "Kind"
                          },
                          "_du_spec": {
                            "anyOf": [
                              {
                                "type": "object",
                                "additionalProperties": true
                              },
                              {
                                "type": "null"
                              }
                            ],
                            "readOnly": true,
                            "description": "Optional compact spec for resilience:\n{\n    \"title\": \"QualifiedName\",\n    \"base\": \"QualifiedNameOfBaseClass\",\n    \"fields\": {\n    \"name\": {\"type\": \"str\", \"required\": True},\n    \"age\":  {\"type\": \"int\", \"required\": False, \"default\": 0}\n    }\n}\nOnly emitted if __include_du_spec__ is True.\n\nWe need this for MCPAction that are constructed on the fly\ne.g., if the MCP was created on the server side, clients may not\nhave access to schema via discriminator mapping.\nRead openhands/sdk/mcp/tool.py for more context.",
                            "title": "Du Spec"
                          }
                        },
                        "required": [
                          "observation",
                          "action_id",
                          "tool_name",
                          "tool_call_id",
                          "kind",
                          "_du_spec"
                        ],
                        "title": "ObservationEvent",
                        "additionalProperties": false
                      },
                      {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Unique event id (ULID/UUID)",
                            "title": "Id"
                          },
                          "timestamp": {
                            "type": "string",
                            "description": "Event timestamp",
                            "title": "Timestamp"
                          },
                          "source": {
                            "enum": [
                              "agent",
                              "user",
                              "environment"
                            ],
                            "type": "string",
                            "default": "agent",
                            "title": "Source"
                          },
                          "system_prompt": {
                            "$ref": "#/components/schemas/TextContent",
                            "description": "The system prompt text"
                          },
                          "tools": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/ChatCompletionToolParam"
                            },
                            "description": "List of tools in OpenAI tool format",
                            "title": "Tools"
                          },
                          "kind": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Property to create kind field from class name when serializing.",
                            "title": "Kind"
                          },
                          "_du_spec": {
                            "anyOf": [
                              {
                                "type": "object",
                                "additionalProperties": true
                              },
                              {
                                "type": "null"
                              }
                            ],
                            "readOnly": true,
                            "description": "Optional compact spec for resilience:\n{\n    \"title\": \"QualifiedName\",\n    \"base\": \"QualifiedNameOfBaseClass\",\n    \"fields\": {\n    \"name\": {\"type\": \"str\", \"required\": True},\n    \"age\":  {\"type\": \"int\", \"required\": False, \"default\": 0}\n    }\n}\nOnly emitted if __include_du_spec__ is True.\n\nWe need this for MCPAction that are constructed on the fly\ne.g., if the MCP was created on the server side, clients may not\nhave access to schema via discriminator mapping.\nRead openhands/sdk/mcp/tool.py for more context.",
                            "title": "Du Spec"
                          }
                        },
                        "required": [
                          "system_prompt",
                          "tools",
                          "kind",
                          "_du_spec"
                        ],
                        "title": "SystemPromptEvent",
                        "description": "System prompt added by the agent.",
                        "additionalProperties": false
                      },
                      {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Unique event id (ULID/UUID)",
                            "title": "Id"
                          },
                          "timestamp": {
                            "type": "string",
                            "description": "Event timestamp",
                            "title": "Timestamp"
                          },
                          "source": {
                            "enum": [
                              "agent",
                              "user",
                              "environment"
                            ],
                            "type": "string",
                            "default": "user",
                            "title": "Source"
                          },
                          "action_id": {
                            "type": "string",
                            "description": "The action id that this rejection is responding to",
                            "title": "Action Id"
                          },
                          "tool_name": {
                            "type": "string",
                            "description": "The tool name that this rejection is responding to",
                            "title": "Tool Name"
                          },
                          "tool_call_id": {
                            "type": "string",
                            "description": "The tool call id that this rejection is responding to",
                            "title": "Tool Call Id"
                          },
                          "rejection_reason": {
                            "type": "string",
                            "default": "User rejected the action",
                            "description": "Reason for rejecting the action",
                            "title": "Rejection Reason"
                          },
                          "kind": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Property to create kind field from class name when serializing.",
                            "title": "Kind"
                          },
                          "_du_spec": {
                            "anyOf": [
                              {
                                "type": "object",
                                "additionalProperties": true
                              },
                              {
                                "type": "null"
                              }
                            ],
                            "readOnly": true,
                            "description": "Optional compact spec for resilience:\n{\n    \"title\": \"QualifiedName\",\n    \"base\": \"QualifiedNameOfBaseClass\",\n    \"fields\": {\n    \"name\": {\"type\": \"str\", \"required\": True},\n    \"age\":  {\"type\": \"int\", \"required\": False, \"default\": 0}\n    }\n}\nOnly emitted if __include_du_spec__ is True.\n\nWe need this for MCPAction that are constructed on the fly\ne.g., if the MCP was created on the server side, clients may not\nhave access to schema via discriminator mapping.\nRead openhands/sdk/mcp/tool.py for more context.",
                            "title": "Du Spec"
                          }
                        },
                        "required": [
                          "action_id",
                          "tool_name",
                          "tool_call_id",
                          "kind",
                          "_du_spec"
                        ],
                        "title": "UserRejectObservation",
                        "description": "Observation when user rejects an action in confirmation mode.",
                        "additionalProperties": false
                      },
                      {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Unique event id (ULID/UUID)",
                            "title": "Id"
                          },
                          "timestamp": {
                            "type": "string",
                            "description": "Event timestamp",
                            "title": "Timestamp"
                          },
                          "source": {
                            "enum": [
                              "agent",
                              "user",
                              "environment"
                            ],
                            "type": "string",
                            "default": "user",
                            "title": "Source"
                          },
                          "kind": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Property to create kind field from class name when serializing.",
                            "title": "Kind"
                          },
                          "_du_spec": {
                            "anyOf": [
                              {
                                "type": "object",
                                "additionalProperties": true
                              },
                              {
                                "type": "null"
                              }
                            ],
                            "readOnly": true,
                            "description": "Optional compact spec for resilience:\n{\n    \"title\": \"QualifiedName\",\n    \"base\": \"QualifiedNameOfBaseClass\",\n    \"fields\": {\n    \"name\": {\"type\": \"str\", \"required\": True},\n    \"age\":  {\"type\": \"int\", \"required\": False, \"default\": 0}\n    }\n}\nOnly emitted if __include_du_spec__ is True.\n\nWe need this for MCPAction that are constructed on the fly\ne.g., if the MCP was created on the server side, clients may not\nhave access to schema via discriminator mapping.\nRead openhands/sdk/mcp/tool.py for more context.",
                            "title": "Du Spec"
                          }
                        },
                        "required": [
                          "kind",
                          "_du_spec"
                        ],
                        "title": "PauseEvent",
                        "description": "Event indicating that the agent execution was paused by user request.",
                        "additionalProperties": false
                      }
                    ],
                    "discriminator": {
                      "propertyName": "kind"
                    }
                  },
                  "title": "Response Get Conversation Events"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/conversations/{conversation_id}/messages": {
      "post": {
        "tags": [
          "conversations"
        ],
        "summary": "Send Message",
        "operationId": "send_message_to_conversation",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "conversation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Conversation Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendMessageRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/conversations/{conversation_id}/run": {
      "post": {
        "tags": [
          "conversations"
        ],
        "summary": "Run Conversation",
        "description": "Starts or resumes the agent run for a conversation in the background.",
        "operationId": "run_conversation",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "conversation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Conversation Id"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/conversations/{conversation_id}/pause": {
      "post": {
        "tags": [
          "conversations"
        ],
        "summary": "Pause Conversation",
        "operationId": "pause_conversation",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "conversation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Conversation Id"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/conversations/{conversation_id}/respond_to_confirmation": {
      "post": {
        "tags": [
          "conversations"
        ],
        "summary": "Respond To Confirmation",
        "operationId": "respond_to_confirmation",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "conversation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Conversation Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfirmationResponseRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/server/exec": {
      "post": {
        "tags": [
          "server"
        ],
        "summary": "Execute a bash command via subprocess.",
        "operationId": "server_exec_server_exec_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CmdExecRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CmdExecResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/server/fs/upload": {
      "post": {
        "tags": [
          "server"
        ],
        "summary": "Upload a file to the server filesystem.",
        "operationId": "fs_upload_server_fs_upload_post",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "dest_path",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Destination file path under FS_ROOT (default \"/\"). If exists, will overwrite. Intermediate directories will be created as needed.",
              "title": "Dest Path"
            },
            "description": "Destination file path under FS_ROOT (default \"/\"). If exists, will overwrite. Intermediate directories will be created as needed."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_fs_upload_server_fs_upload_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/server/fs/download": {
      "get": {
        "tags": [
          "server"
        ],
        "summary": "Fs Download",
        "operationId": "fs_download_server_fs_download_get",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "path",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "File path under FS_ROOT.",
              "title": "Path"
            },
            "description": "File path under FS_ROOT."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AgentContext": {
        "properties": {
          "microagents": {
            "items": {
              "$ref": "#/components/schemas/BaseMicroagent"
            },
            "type": "array",
            "title": "Microagents",
            "description": "List of available microagents that can extend the user's input."
          },
          "system_message_suffix": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "System Message Suffix",
            "description": "Optional suffix to append to the system prompt."
          },
          "user_message_suffix": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Message Suffix",
            "description": "Optional suffix to append to the user's message."
          }
        },
        "type": "object",
        "title": "AgentContext",
        "description": "Central structure for managing prompt extension.\n\nAgentContext unifies all the contextual inputs that shape how the system\nextends and interprets user prompts. It combines both static environment\ndetails and dynamic, user-activated extensions from microagents.\n\nSpecifically, it provides:\n- **Repository context / Repo Microagents**: Information about the active codebase,\n  branches, and repo-specific instructions contributed by repo microagents.\n- **Runtime context**: Current execution environment (hosts, working\n  directory, secrets, date, etc.).\n- **Conversation instructions**: Optional task- or channel-specific rules\n  that constrain or guide the agent\u2019s behavior across the session.\n- **Knowledge Microagents**: Extensible components that can be triggered by user input\n  to inject knowledge or domain-specific guidance.\n\nTogether, these elements make AgentContext the primary container responsible\nfor assembling, formatting, and injecting all prompt-relevant context into\nLLM interactions."
      },
      "Annotations": {
        "properties": {
          "audience": {
            "anyOf": [
              {
                "items": {
                  "type": "string",
                  "enum": [
                    "user",
                    "assistant"
                  ]
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Audience"
          },
          "priority": {
            "anyOf": [
              {
                "type": "number",
                "maximum": 1.0,
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Priority"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "title": "Annotations"
      },
      "BaseMicroagent": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "content": {
            "type": "string",
            "title": "Content"
          },
          "source": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Source",
            "description": "The source path or identifier of the microagent. When it is None, it is treated as a programmatically defined microagent."
          },
          "type": {
            "type": "string",
            "enum": [
              "knowledge",
              "repo",
              "task"
            ],
            "title": "Type",
            "default": "repo"
          }
        },
        "type": "object",
        "required": [
          "name",
          "content"
        ],
        "title": "BaseMicroagent",
        "description": "Base class for all microagents."
      },
      "Body_fs_upload_server_fs_upload_post": {
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "title": "File"
          }
        },
        "type": "object",
        "required": [
          "file"
        ],
        "title": "Body_fs_upload_server_fs_upload_post"
      },
      "ChatCompletionCachedContent": {
        "properties": {
          "type": {
            "type": "string",
            "const": "ephemeral",
            "title": "Type"
          }
        },
        "type": "object",
        "required": [
          "type"
        ],
        "title": "ChatCompletionCachedContent"
      },
      "ChatCompletionMessageToolCall": {
        "properties": {},
        "additionalProperties": true,
        "type": "object",
        "title": "ChatCompletionMessageToolCall"
      },
      "ChatCompletionToolParam": {
        "properties": {
          "type": {
            "anyOf": [
              {
                "type": "string",
                "const": "function"
              },
              {
                "type": "string"
              }
            ],
            "title": "Type"
          },
          "function": {
            "$ref": "#/components/schemas/ChatCompletionToolParamFunctionChunk"
          },
          "cache_control": {
            "$ref": "#/components/schemas/ChatCompletionCachedContent"
          }
        },
        "type": "object",
        "required": [
          "type",
          "function"
        ],
        "title": "ChatCompletionToolParam"
      },
      "ChatCompletionToolParamFunctionChunk": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "type": "string",
            "title": "Description"
          },
          "parameters": {
            "additionalProperties": true,
            "type": "object",
            "title": "Parameters"
          },
          "strict": {
            "type": "boolean",
            "title": "Strict"
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "ChatCompletionToolParamFunctionChunk"
      },
      "CmdExecRequest": {
        "properties": {
          "command": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Command",
            "description": "Executable and args; no shell."
          },
          "timeout": {
            "type": "integer",
            "maximum": 600.0,
            "minimum": 1.0,
            "title": "Timeout",
            "default": 30
          },
          "cwd": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cwd",
            "description": "Working directory under FS_ROOT."
          },
          "env": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Env"
          },
          "max_output_bytes": {
            "type": "integer",
            "maximum": 10000000.0,
            "minimum": 1.0,
            "title": "Max Output Bytes",
            "default": 1000000
          }
        },
        "type": "object",
        "required": [
          "command"
        ],
        "title": "CmdExecRequest"
      },
      "CmdExecResponse": {
        "properties": {
          "stdout": {
            "type": "string",
            "title": "Stdout"
          },
          "stderr": {
            "type": "string",
            "title": "Stderr"
          },
          "return_code": {
            "type": "integer",
            "title": "Return Code"
          },
          "timed_out": {
            "type": "boolean",
            "title": "Timed Out"
          },
          "duration_ms": {
            "type": "integer",
            "title": "Duration Ms"
          }
        },
        "type": "object",
        "required": [
          "stdout",
          "stderr",
          "return_code",
          "timed_out",
          "duration_ms"
        ],
        "title": "CmdExecResponse"
      },
      "CmdOutputMetadata": {
        "properties": {
          "exit_code": {
            "type": "integer",
            "title": "Exit Code",
            "description": "The exit code of the last executed command.",
            "default": -1
          },
          "pid": {
            "type": "integer",
            "title": "Pid",
            "description": "The process ID of the last executed command.",
            "default": -1
          },
          "username": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Username",
            "description": "The username of the current user."
          },
          "hostname": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Hostname",
            "description": "The hostname of the machine."
          },
          "working_dir": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Working Dir",
            "description": "The current working directory."
          },
          "py_interpreter_path": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Py Interpreter Path",
            "description": "The path to the current Python interpreter, if any."
          },
          "prefix": {
            "type": "string",
            "title": "Prefix",
            "description": "Prefix to add to command output",
            "default": ""
          },
          "suffix": {
            "type": "string",
            "title": "Suffix",
            "description": "Suffix to add to command output",
            "default": ""
          }
        },
        "type": "object",
        "title": "CmdOutputMetadata",
        "description": "Additional metadata captured from PS1"
      },
      "ConfirmationResponseRequest": {
        "properties": {
          "accept": {
            "type": "boolean",
            "title": "Accept"
          },
          "reason": {
            "type": "string",
            "title": "Reason",
            "default": "User rejected the action."
          }
        },
        "type": "object",
        "required": [
          "accept"
        ],
        "title": "ConfirmationResponseRequest",
        "description": "Payload to accept or reject a pending action."
      },
      "ConversationState": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "Unique conversation ID"
          },
          "agent": {
            "oneOf": [
              {
                "properties": {
                  "llm": {
                    "$ref": "#/components/schemas/LLM"
                  },
                  "agent_context": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/AgentContext"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "tools": {
                    "anyOf": [
                      {
                        "additionalProperties": {
                          "oneOf": [
                            {
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "title": "Name"
                                },
                                "description": {
                                  "type": "string",
                                  "title": "Description"
                                },
                                "action_type": {
                                  "type": "string",
                                  "title": "Action Type"
                                },
                                "observation_type": {
                                  "anyOf": [
                                    {
                                      "type": "string"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ],
                                  "title": "Observation Type"
                                },
                                "annotations": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/components/schemas/openhands__sdk__tool__tool__ToolAnnotations"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ]
                                },
                                "meta": {
                                  "anyOf": [
                                    {
                                      "additionalProperties": true,
                                      "type": "object"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ],
                                  "title": "Meta"
                                },
                                "mcp_tool": {
                                  "$ref": "#/components/schemas/Tool",
                                  "description": "The MCP tool definition."
                                },
                                "kind": {
                                  "type": "string",
                                  "title": "Kind",
                                  "description": "Property to create kind field from class name when serializing.",
                                  "readOnly": true
                                },
                                "_du_spec": {
                                  "anyOf": [
                                    {
                                      "additionalProperties": true,
                                      "type": "object"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ],
                                  "title": "Du Spec",
                                  "description": "Optional compact spec for resilience:\n{\n    \"title\": \"QualifiedName\",\n    \"base\": \"QualifiedNameOfBaseClass\",\n    \"fields\": {\n    \"name\": {\"type\": \"str\", \"required\": True},\n    \"age\":  {\"type\": \"int\", \"required\": False, \"default\": 0}\n    }\n}\nOnly emitted if __include_du_spec__ is True.\n\nWe need this for MCPAction that are constructed on the fly\ne.g., if the MCP was created on the server side, clients may not\nhave access to schema via discriminator mapping.\nRead openhands/sdk/mcp/tool.py for more context.",
                                  "readOnly": true
                                },
                                "input_schema": {
                                  "additionalProperties": true,
                                  "type": "object",
                                  "title": "Input Schema",
                                  "readOnly": true
                                },
                                "output_schema": {
                                  "anyOf": [
                                    {
                                      "additionalProperties": true,
                                      "type": "object"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ],
                                  "title": "Output Schema",
                                  "readOnly": true
                                },
                                "title": {
                                  "type": "string",
                                  "title": "Title",
                                  "readOnly": true
                                }
                              },
                              "type": "object",
                              "required": [
                                "name",
                                "description",
                                "action_type",
                                "mcp_tool",
                                "kind",
                                "_du_spec",
                                "input_schema",
                                "output_schema",
                                "title"
                              ],
                              "title": "MCPTool",
                              "description": "MCP Tool that wraps an MCP client and provides tool functionality."
                            },
                            {
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "title": "Name"
                                },
                                "description": {
                                  "type": "string",
                                  "title": "Description"
                                },
                                "action_type": {
                                  "type": "string",
                                  "title": "Action Type"
                                },
                                "observation_type": {
                                  "anyOf": [
                                    {
                                      "type": "string"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ],
                                  "title": "Observation Type"
                                },
                                "annotations": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/components/schemas/openhands__sdk__tool__tool__ToolAnnotations"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ]
                                },
                                "meta": {
                                  "anyOf": [
                                    {
                                      "additionalProperties": true,
                                      "type": "object"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ],
                                  "title": "Meta"
                                },
                                "kind": {
                                  "type": "string",
                                  "title": "Kind",
                                  "description": "Property to create kind field from class name when serializing.",
                                  "readOnly": true
                                },
                                "_du_spec": {
                                  "anyOf": [
                                    {
                                      "additionalProperties": true,
                                      "type": "object"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ],
                                  "title": "Du Spec",
                                  "description": "Optional compact spec for resilience:\n{\n    \"title\": \"QualifiedName\",\n    \"base\": \"QualifiedNameOfBaseClass\",\n    \"fields\": {\n    \"name\": {\"type\": \"str\", \"required\": True},\n    \"age\":  {\"type\": \"int\", \"required\": False, \"default\": 0}\n    }\n}\nOnly emitted if __include_du_spec__ is True.\n\nWe need this for MCPAction that are constructed on the fly\ne.g., if the MCP was created on the server side, clients may not\nhave access to schema via discriminator mapping.\nRead openhands/sdk/mcp/tool.py for more context.",
                                  "readOnly": true
                                },
                                "input_schema": {
                                  "additionalProperties": true,
                                  "type": "object",
                                  "title": "Input Schema",
                                  "readOnly": true
                                },
                                "output_schema": {
                                  "anyOf": [
                                    {
                                      "additionalProperties": true,
                                      "type": "object"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ],
                                  "title": "Output Schema",
                                  "readOnly": true
                                },
                                "title": {
                                  "type": "string",
                                  "title": "Title",
                                  "readOnly": true
                                }
                              },
                              "type": "object",
                              "required": [
                                "name",
                                "description",
                                "action_type",
                                "kind",
                                "_du_spec",
                                "input_schema",
                                "output_schema",
                                "title"
                              ],
                              "title": "Tool[ExecuteBashAction, ExecuteBashObservation]"
                            },
                            {
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "title": "Name"
                                },
                                "description": {
                                  "type": "string",
                                  "title": "Description"
                                },
                                "action_type": {
                                  "type": "string",
                                  "title": "Action Type"
                                },
                                "observation_type": {
                                  "anyOf": [
                                    {
                                      "type": "string"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ],
                                  "title": "Observation Type"
                                },
                                "annotations": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/components/schemas/openhands__sdk__tool__tool__ToolAnnotations"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ]
                                },
                                "meta": {
                                  "anyOf": [
                                    {
                                      "additionalProperties": true,
                                      "type": "object"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ],
                                  "title": "Meta"
                                },
                                "kind": {
                                  "type": "string",
                                  "title": "Kind",
                                  "description": "Property to create kind field from class name when serializing.",
                                  "readOnly": true
                                },
                                "_du_spec": {
                                  "anyOf": [
                                    {
                                      "additionalProperties": true,
                                      "type": "object"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ],
                                  "title": "Du Spec",
                                  "description": "Optional compact spec for resilience:\n{\n    \"title\": \"QualifiedName\",\n    \"base\": \"QualifiedNameOfBaseClass\",\n    \"fields\": {\n    \"name\": {\"type\": \"str\", \"required\": True},\n    \"age\":  {\"type\": \"int\", \"required\": False, \"default\": 0}\n    }\n}\nOnly emitted if __include_du_spec__ is True.\n\nWe need this for MCPAction that are constructed on the fly\ne.g., if the MCP was created on the server side, clients may not\nhave access to schema via discriminator mapping.\nRead openhands/sdk/mcp/tool.py for more context.",
                                  "readOnly": true
                                },
                                "input_schema": {
                                  "additionalProperties": true,
                                  "type": "object",
                                  "title": "Input Schema",
                                  "readOnly": true
                                },
                                "output_schema": {
                                  "anyOf": [
                                    {
                                      "additionalProperties": true,
                                      "type": "object"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ],
                                  "title": "Output Schema",
                                  "readOnly": true
                                },
                                "title": {
                                  "type": "string",
                                  "title": "Title",
                                  "readOnly": true
                                }
                              },
                              "type": "object",
                              "required": [
                                "name",
                                "description",
                                "action_type",
                                "kind",
                                "_du_spec",
                                "input_schema",
                                "output_schema",
                                "title"
                              ],
                              "title": "Tool[MCPActionBase, MCPToolObservation]"
                            },
                            {
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "title": "Name"
                                },
                                "description": {
                                  "type": "string",
                                  "title": "Description"
                                },
                                "action_type": {
                                  "type": "string",
                                  "title": "Action Type"
                                },
                                "observation_type": {
                                  "anyOf": [
                                    {
                                      "type": "string"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ],
                                  "title": "Observation Type"
                                },
                                "annotations": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/components/schemas/openhands__sdk__tool__tool__ToolAnnotations"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ]
                                },
                                "meta": {
                                  "anyOf": [
                                    {
                                      "additionalProperties": true,
                                      "type": "object"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ],
                                  "title": "Meta"
                                },
                                "kind": {
                                  "type": "string",
                                  "title": "Kind",
                                  "description": "Property to create kind field from class name when serializing.",
                                  "readOnly": true
                                },
                                "_du_spec": {
                                  "anyOf": [
                                    {
                                      "additionalProperties": true,
                                      "type": "object"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ],
                                  "title": "Du Spec",
                                  "description": "Optional compact spec for resilience:\n{\n    \"title\": \"QualifiedName\",\n    \"base\": \"QualifiedNameOfBaseClass\",\n    \"fields\": {\n    \"name\": {\"type\": \"str\", \"required\": True},\n    \"age\":  {\"type\": \"int\", \"required\": False, \"default\": 0}\n    }\n}\nOnly emitted if __include_du_spec__ is True.\n\nWe need this for MCPAction that are constructed on the fly\ne.g., if the MCP was created on the server side, clients may not\nhave access to schema via discriminator mapping.\nRead openhands/sdk/mcp/tool.py for more context.",
                                  "readOnly": true
                                },
                                "input_schema": {
                                  "additionalProperties": true,
                                  "type": "object",
                                  "title": "Input Schema",
                                  "readOnly": true
                                },
                                "output_schema": {
                                  "anyOf": [
                                    {
                                      "additionalProperties": true,
                                      "type": "object"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ],
                                  "title": "Output Schema",
                                  "readOnly": true
                                },
                                "title": {
                                  "type": "string",
                                  "title": "Title",
                                  "readOnly": true
                                }
                              },
                              "type": "object",
                              "required": [
                                "name",
                                "description",
                                "action_type",
                                "kind",
                                "_du_spec",
                                "input_schema",
                                "output_schema",
                                "title"
                              ],
                              "title": "Tool[StrReplaceEditorAction, StrReplaceEditorObservation]"
                            },
                            {
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "title": "Name"
                                },
                                "description": {
                                  "type": "string",
                                  "title": "Description"
                                },
                                "action_type": {
                                  "type": "string",
                                  "title": "Action Type"
                                },
                                "observation_type": {
                                  "anyOf": [
                                    {
                                      "type": "string"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ],
                                  "title": "Observation Type"
                                },
                                "annotations": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/components/schemas/openhands__sdk__tool__tool__ToolAnnotations"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ]
                                },
                                "meta": {
                                  "anyOf": [
                                    {
                                      "additionalProperties": true,
                                      "type": "object"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ],
                                  "title": "Meta"
                                },
                                "kind": {
                                  "type": "string",
                                  "title": "Kind",
                                  "description": "Property to create kind field from class name when serializing.",
                                  "readOnly": true
                                },
                                "_du_spec": {
                                  "anyOf": [
                                    {
                                      "additionalProperties": true,
                                      "type": "object"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ],
                                  "title": "Du Spec",
                                  "description": "Optional compact spec for resilience:\n{\n    \"title\": \"QualifiedName\",\n    \"base\": \"QualifiedNameOfBaseClass\",\n    \"fields\": {\n    \"name\": {\"type\": \"str\", \"required\": True},\n    \"age\":  {\"type\": \"int\", \"required\": False, \"default\": 0}\n    }\n}\nOnly emitted if __include_du_spec__ is True.\n\nWe need this for MCPAction that are constructed on the fly\ne.g., if the MCP was created on the server side, clients may not\nhave access to schema via discriminator mapping.\nRead openhands/sdk/mcp/tool.py for more context.",
                                  "readOnly": true
                                },
                                "input_schema": {
                                  "additionalProperties": true,
                                  "type": "object",
                                  "title": "Input Schema",
                                  "readOnly": true
                                },
                                "output_schema": {
                                  "anyOf": [
                                    {
                                      "additionalProperties": true,
                                      "type": "object"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ],
                                  "title": "Output Schema",
                                  "readOnly": true
                                },
                                "title": {
                                  "type": "string",
                                  "title": "Title",
                                  "readOnly": true
                                }
                              },
                              "type": "object",
                              "required": [
                                "name",
                                "description",
                                "action_type",
                                "kind",
                                "_du_spec",
                                "input_schema",
                                "output_schema",
                                "title"
                              ],
                              "title": "Tool[TaskTrackerAction, TaskTrackerObservation]"
                            },
                            {
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "title": "Name"
                                },
                                "description": {
                                  "type": "string",
                                  "title": "Description"
                                },
                                "action_type": {
                                  "type": "string",
                                  "title": "Action Type"
                                },
                                "observation_type": {
                                  "anyOf": [
                                    {
                                      "type": "string"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ],
                                  "title": "Observation Type"
                                },
                                "annotations": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/components/schemas/openhands__sdk__tool__tool__ToolAnnotations"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ]
                                },
                                "meta": {
                                  "anyOf": [
                                    {
                                      "additionalProperties": true,
                                      "type": "object"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ],
                                  "title": "Meta"
                                },
                                "kind": {
                                  "type": "string",
                                  "title": "Kind",
                                  "description": "Property to create kind field from class name when serializing.",
                                  "readOnly": true
                                },
                                "_du_spec": {
                                  "anyOf": [
                                    {
                                      "additionalProperties": true,
                                      "type": "object"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ],
                                  "title": "Du Spec",
                                  "description": "Optional compact spec for resilience:\n{\n    \"title\": \"QualifiedName\",\n    \"base\": \"QualifiedNameOfBaseClass\",\n    \"fields\": {\n    \"name\": {\"type\": \"str\", \"required\": True},\n    \"age\":  {\"type\": \"int\", \"required\": False, \"default\": 0}\n    }\n}\nOnly emitted if __include_du_spec__ is True.\n\nWe need this for MCPAction that are constructed on the fly\ne.g., if the MCP was created on the server side, clients may not\nhave access to schema via discriminator mapping.\nRead openhands/sdk/mcp/tool.py for more context.",
                                  "readOnly": true
                                },
                                "input_schema": {
                                  "additionalProperties": true,
                                  "type": "object",
                                  "title": "Input Schema",
                                  "readOnly": true
                                },
                                "output_schema": {
                                  "anyOf": [
                                    {
                                      "additionalProperties": true,
                                      "type": "object"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ],
                                  "title": "Output Schema",
                                  "readOnly": true
                                },
                                "title": {
                                  "type": "string",
                                  "title": "Title",
                                  "readOnly": true
                                }
                              },
                              "type": "object",
                              "required": [
                                "name",
                                "description",
                                "action_type",
                                "kind",
                                "_du_spec",
                                "input_schema",
                                "output_schema",
                                "title"
                              ],
                              "title": "BashTool",
                              "description": "A Tool subclass that automatically initializes a BashExecutor with auto-detection."
                            },
                            {
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "title": "Name"
                                },
                                "description": {
                                  "type": "string",
                                  "title": "Description"
                                },
                                "action_type": {
                                  "type": "string",
                                  "title": "Action Type"
                                },
                                "observation_type": {
                                  "anyOf": [
                                    {
                                      "type": "string"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ],
                                  "title": "Observation Type"
                                },
                                "annotations": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/components/schemas/openhands__sdk__tool__tool__ToolAnnotations"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ]
                                },
                                "meta": {
                                  "anyOf": [
                                    {
                                      "additionalProperties": true,
                                      "type": "object"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ],
                                  "title": "Meta"
                                },
                                "kind": {
                                  "type": "string",
                                  "title": "Kind",
                                  "description": "Property to create kind field from class name when serializing.",
                                  "readOnly": true
                                },
                                "_du_spec": {
                                  "anyOf": [
                                    {
                                      "additionalProperties": true,
                                      "type": "object"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ],
                                  "title": "Du Spec",
                                  "description": "Optional compact spec for resilience:\n{\n    \"title\": \"QualifiedName\",\n    \"base\": \"QualifiedNameOfBaseClass\",\n    \"fields\": {\n    \"name\": {\"type\": \"str\", \"required\": True},\n    \"age\":  {\"type\": \"int\", \"required\": False, \"default\": 0}\n    }\n}\nOnly emitted if __include_du_spec__ is True.\n\nWe need this for MCPAction that are constructed on the fly\ne.g., if the MCP was created on the server side, clients may not\nhave access to schema via discriminator mapping.\nRead openhands/sdk/mcp/tool.py for more context.",
                                  "readOnly": true
                                },
                                "input_schema": {
                                  "additionalProperties": true,
                                  "type": "object",
                                  "title": "Input Schema",
                                  "readOnly": true
                                },
                                "output_schema": {
                                  "anyOf": [
                                    {
                                      "additionalProperties": true,
                                      "type": "object"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ],
                                  "title": "Output Schema",
                                  "readOnly": true
                                },
                                "title": {
                                  "type": "string",
                                  "title": "Title",
                                  "readOnly": true
                                }
                              },
                              "type": "object",
                              "required": [
                                "name",
                                "description",
                                "action_type",
                                "kind",
                                "_du_spec",
                                "input_schema",
                                "output_schema",
                                "title"
                              ],
                              "title": "FileEditorTool",
                              "description": "A Tool subclass that automatically initializes a FileEditorExecutor."
                            },
                            {
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "title": "Name"
                                },
                                "description": {
                                  "type": "string",
                                  "title": "Description"
                                },
                                "action_type": {
                                  "type": "string",
                                  "title": "Action Type"
                                },
                                "observation_type": {
                                  "anyOf": [
                                    {
                                      "type": "string"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ],
                                  "title": "Observation Type"
                                },
                                "annotations": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/components/schemas/openhands__sdk__tool__tool__ToolAnnotations"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ]
                                },
                                "meta": {
                                  "anyOf": [
                                    {
                                      "additionalProperties": true,
                                      "type": "object"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ],
                                  "title": "Meta"
                                },
                                "kind": {
                                  "type": "string",
                                  "title": "Kind",
                                  "description": "Property to create kind field from class name when serializing.",
                                  "readOnly": true
                                },
                                "_du_spec": {
                                  "anyOf": [
                                    {
                                      "additionalProperties": true,
                                      "type": "object"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ],
                                  "title": "Du Spec",
                                  "description": "Optional compact spec for resilience:\n{\n    \"title\": \"QualifiedName\",\n    \"base\": \"QualifiedNameOfBaseClass\",\n    \"fields\": {\n    \"name\": {\"type\": \"str\", \"required\": True},\n    \"age\":  {\"type\": \"int\", \"required\": False, \"default\": 0}\n    }\n}\nOnly emitted if __include_du_spec__ is True.\n\nWe need this for MCPAction that are constructed on the fly\ne.g., if the MCP was created on the server side, clients may not\nhave access to schema via discriminator mapping.\nRead openhands/sdk/mcp/tool.py for more context.",
                                  "readOnly": true
                                },
                                "input_schema": {
                                  "additionalProperties": true,
                                  "type": "object",
                                  "title": "Input Schema",
                                  "readOnly": true
                                },
                                "output_schema": {
                                  "anyOf": [
                                    {
                                      "additionalProperties": true,
                                      "type": "object"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ],
                                  "title": "Output Schema",
                                  "readOnly": true
                                },
                                "title": {
                                  "type": "string",
                                  "title": "Title",
                                  "readOnly": true
                                }
                              },
                              "type": "object",
                              "required": [
                                "name",
                                "description",
                                "action_type",
                                "kind",
                                "_du_spec",
                                "input_schema",
                                "output_schema",
                                "title"
                              ],
                              "title": "TaskTrackerTool",
                              "description": "A Tool subclass that automatically initializes a TaskTrackerExecutor."
                            }
                          ],
                          "discriminator": {
                            "propertyName": "kind"
                          }
                        },
                        "type": "object"
                      },
                      {
                        "items": {
                          "oneOf": [
                            {
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "title": "Name"
                                },
                                "description": {
                                  "type": "string",
                                  "title": "Description"
                                },
                                "action_type": {
                                  "type": "string",
                                  "title": "Action Type"
                                },
                                "observation_type": {
                                  "anyOf": [
                                    {
                                      "type": "string"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ],
                                  "title": "Observation Type"
                                },
                                "annotations": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/components/schemas/openhands__sdk__tool__tool__ToolAnnotations"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ]
                                },
                                "meta": {
                                  "anyOf": [
                                    {
                                      "additionalProperties": true,
                                      "type": "object"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ],
                                  "title": "Meta"
                                },
                                "mcp_tool": {
                                  "$ref": "#/components/schemas/Tool",
                                  "description": "The MCP tool definition."
                                },
                                "kind": {
                                  "type": "string",
                                  "title": "Kind",
                                  "description": "Property to create kind field from class name when serializing.",
                                  "readOnly": true
                                },
                                "_du_spec": {
                                  "anyOf": [
                                    {
                                      "additionalProperties": true,
                                      "type": "object"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ],
                                  "title": "Du Spec",
                                  "description": "Optional compact spec for resilience:\n{\n    \"title\": \"QualifiedName\",\n    \"base\": \"QualifiedNameOfBaseClass\",\n    \"fields\": {\n    \"name\": {\"type\": \"str\", \"required\": True},\n    \"age\":  {\"type\": \"int\", \"required\": False, \"default\": 0}\n    }\n}\nOnly emitted if __include_du_spec__ is True.\n\nWe need this for MCPAction that are constructed on the fly\ne.g., if the MCP was created on the server side, clients may not\nhave access to schema via discriminator mapping.\nRead openhands/sdk/mcp/tool.py for more context.",
                                  "readOnly": true
                                },
                                "input_schema": {
                                  "additionalProperties": true,
                                  "type": "object",
                                  "title": "Input Schema",
                                  "readOnly": true
                                },
                                "output_schema": {
                                  "anyOf": [
                                    {
                                      "additionalProperties": true,
                                      "type": "object"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ],
                                  "title": "Output Schema",
                                  "readOnly": true
                                },
                                "title": {
                                  "type": "string",
                                  "title": "Title",
                                  "readOnly": true
                                }
                              },
                              "type": "object",
                              "required": [
                                "name",
                                "description",
                                "action_type",
                                "mcp_tool",
                                "kind",
                                "_du_spec",
                                "input_schema",
                                "output_schema",
                                "title"
                              ],
                              "title": "MCPTool",
                              "description": "MCP Tool that wraps an MCP client and provides tool functionality."
                            },
                            {
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "title": "Name"
                                },
                                "description": {
                                  "type": "string",
                                  "title": "Description"
                                },
                                "action_type": {
                                  "type": "string",
                                  "title": "Action Type"
                                },
                                "observation_type": {
                                  "anyOf": [
                                    {
                                      "type": "string"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ],
                                  "title": "Observation Type"
                                },
                                "annotations": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/components/schemas/openhands__sdk__tool__tool__ToolAnnotations"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ]
                                },
                                "meta": {
                                  "anyOf": [
                                    {
                                      "additionalProperties": true,
                                      "type": "object"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ],
                                  "title": "Meta"
                                },
                                "kind": {
                                  "type": "string",
                                  "title": "Kind",
                                  "description": "Property to create kind field from class name when serializing.",
                                  "readOnly": true
                                },
                                "_du_spec": {
                                  "anyOf": [
                                    {
                                      "additionalProperties": true,
                                      "type": "object"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ],
                                  "title": "Du Spec",
                                  "description": "Optional compact spec for resilience:\n{\n    \"title\": \"QualifiedName\",\n    \"base\": \"QualifiedNameOfBaseClass\",\n    \"fields\": {\n    \"name\": {\"type\": \"str\", \"required\": True},\n    \"age\":  {\"type\": \"int\", \"required\": False, \"default\": 0}\n    }\n}\nOnly emitted if __include_du_spec__ is True.\n\nWe need this for MCPAction that are constructed on the fly\ne.g., if the MCP was created on the server side, clients may not\nhave access to schema via discriminator mapping.\nRead openhands/sdk/mcp/tool.py for more context.",
                                  "readOnly": true
                                },
                                "input_schema": {
                                  "additionalProperties": true,
                                  "type": "object",
                                  "title": "Input Schema",
                                  "readOnly": true
                                },
                                "output_schema": {
                                  "anyOf": [
                                    {
                                      "additionalProperties": true,
                                      "type": "object"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ],
                                  "title": "Output Schema",
                                  "readOnly": true
                                },
                                "title": {
                                  "type": "string",
                                  "title": "Title",
                                  "readOnly": true
                                }
                              },
                              "type": "object",
                              "required": [
                                "name",
                                "description",
                                "action_type",
                                "kind",
                                "_du_spec",
                                "input_schema",
                                "output_schema",
                                "title"
                              ],
                              "title": "Tool[ExecuteBashAction, ExecuteBashObservation]"
                            },
                            {
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "title": "Name"
                                },
                                "description": {
                                  "type": "string",
                                  "title": "Description"
                                },
                                "action_type": {
                                  "type": "string",
                                  "title": "Action Type"
                                },
                                "observation_type": {
                                  "anyOf": [
                                    {
                                      "type": "string"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ],
                                  "title": "Observation Type"
                                },
                                "annotations": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/components/schemas/openhands__sdk__tool__tool__ToolAnnotations"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ]
                                },
                                "meta": {
                                  "anyOf": [
                                    {
                                      "additionalProperties": true,
                                      "type": "object"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ],
                                  "title": "Meta"
                                },
                                "kind": {
                                  "type": "string",
                                  "title": "Kind",
                                  "description": "Property to create kind field from class name when serializing.",
                                  "readOnly": true
                                },
                                "_du_spec": {
                                  "anyOf": [
                                    {
                                      "additionalProperties": true,
                                      "type": "object"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ],
                                  "title": "Du Spec",
                                  "description": "Optional compact spec for resilience:\n{\n    \"title\": \"QualifiedName\",\n    \"base\": \"QualifiedNameOfBaseClass\",\n    \"fields\": {\n    \"name\": {\"type\": \"str\", \"required\": True},\n    \"age\":  {\"type\": \"int\", \"required\": False, \"default\": 0}\n    }\n}\nOnly emitted if __include_du_spec__ is True.\n\nWe need this for MCPAction that are constructed on the fly\ne.g., if the MCP was created on the server side, clients may not\nhave access to schema via discriminator mapping.\nRead openhands/sdk/mcp/tool.py for more context.",
                                  "readOnly": true
                                },
                                "input_schema": {
                                  "additionalProperties": true,
                                  "type": "object",
                                  "title": "Input Schema",
                                  "readOnly": true
                                },
                                "output_schema": {
                                  "anyOf": [
                                    {
                                      "additionalProperties": true,
                                      "type": "object"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ],
                                  "title": "Output Schema",
                                  "readOnly": true
                                },
                                "title": {
                                  "type": "string",
                                  "title": "Title",
                                  "readOnly": true
                                }
                              },
                              "type": "object",
                              "required": [
                                "name",
                                "description",
                                "action_type",
                                "kind",
                                "_du_spec",
                                "input_schema",
                                "output_schema",
                                "title"
                              ],
                              "title": "Tool[MCPActionBase, MCPToolObservation]"
                            },
                            {
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "title": "Name"
                                },
                                "description": {
                                  "type": "string",
                                  "title": "Description"
                                },
                                "action_type": {
                                  "type": "string",
                                  "title": "Action Type"
                                },
                                "observation_type": {
                                  "anyOf": [
                                    {
                                      "type": "string"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ],
                                  "title": "Observation Type"
                                },
                                "annotations": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/components/schemas/openhands__sdk__tool__tool__ToolAnnotations"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ]
                                },
                                "meta": {
                                  "anyOf": [
                                    {
                                      "additionalProperties": true,
                                      "type": "object"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ],
                                  "title": "Meta"
                                },
                                "kind": {
                                  "type": "string",
                                  "title": "Kind",
                                  "description": "Property to create kind field from class name when serializing.",
                                  "readOnly": true
                                },
                                "_du_spec": {
                                  "anyOf": [
                                    {
                                      "additionalProperties": true,
                                      "type": "object"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ],
                                  "title": "Du Spec",
                                  "description": "Optional compact spec for resilience:\n{\n    \"title\": \"QualifiedName\",\n    \"base\": \"QualifiedNameOfBaseClass\",\n    \"fields\": {\n    \"name\": {\"type\": \"str\", \"required\": True},\n    \"age\":  {\"type\": \"int\", \"required\": False, \"default\": 0}\n    }\n}\nOnly emitted if __include_du_spec__ is True.\n\nWe need this for MCPAction that are constructed on the fly\ne.g., if the MCP was created on the server side, clients may not\nhave access to schema via discriminator mapping.\nRead openhands/sdk/mcp/tool.py for more context.",
                                  "readOnly": true
                                },
                                "input_schema": {
                                  "additionalProperties": true,
                                  "type": "object",
                                  "title": "Input Schema",
                                  "readOnly": true
                                },
                                "output_schema": {
                                  "anyOf": [
                                    {
                                      "additionalProperties": true,
                                      "type": "object"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ],
                                  "title": "Output Schema",
                                  "readOnly": true
                                },
                                "title": {
                                  "type": "string",
                                  "title": "Title",
                                  "readOnly": true
                                }
                              },
                              "type": "object",
                              "required": [
                                "name",
                                "description",
                                "action_type",
                                "kind",
                                "_du_spec",
                                "input_schema",
                                "output_schema",
                                "title"
                              ],
                              "title": "Tool[StrReplaceEditorAction, StrReplaceEditorObservation]"
                            },
                            {
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "title": "Name"
                                },
                                "description": {
                                  "type": "string",
                                  "title": "Description"
                                },
                                "action_type": {
                                  "type": "string",
                                  "title": "Action Type"
                                },
                                "observation_type": {
                                  "anyOf": [
                                    {
                                      "type": "string"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ],
                                  "title": "Observation Type"
                                },
                                "annotations": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/components/schemas/openhands__sdk__tool__tool__ToolAnnotations"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ]
                                },
                                "meta": {
                                  "anyOf": [
                                    {
                                      "additionalProperties": true,
                                      "type": "object"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ],
                                  "title": "Meta"
                                },
                                "kind": {
                                  "type": "string",
                                  "title": "Kind",
                                  "description": "Property to create kind field from class name when serializing.",
                                  "readOnly": true
                                },
                                "_du_spec": {
                                  "anyOf": [
                                    {
                                      "additionalProperties": true,
                                      "type": "object"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ],
                                  "title": "Du Spec",
                                  "description": "Optional compact spec for resilience:\n{\n    \"title\": \"QualifiedName\",\n    \"base\": \"QualifiedNameOfBaseClass\",\n    \"fields\": {\n    \"name\": {\"type\": \"str\", \"required\": True},\n    \"age\":  {\"type\": \"int\", \"required\": False, \"default\": 0}\n    }\n}\nOnly emitted if __include_du_spec__ is True.\n\nWe need this for MCPAction that are constructed on the fly\ne.g., if the MCP was created on the server side, clients may not\nhave access to schema via discriminator mapping.\nRead openhands/sdk/mcp/tool.py for more context.",
                                  "readOnly": true
                                },
                                "input_schema": {
                                  "additionalProperties": true,
                                  "type": "object",
                                  "title": "Input Schema",
                                  "readOnly": true
                                },
                                "output_schema": {
                                  "anyOf": [
                                    {
                                      "additionalProperties": true,
                                      "type": "object"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ],
                                  "title": "Output Schema",
                                  "readOnly": true
                                },
                                "title": {
                                  "type": "string",
                                  "title": "Title",
                                  "readOnly": true
                                }
                              },
                              "type": "object",
                              "required": [
                                "name",
                                "description",
                                "action_type",
                                "kind",
                                "_du_spec",
                                "input_schema",
                                "output_schema",
                                "title"
                              ],
                              "title": "Tool[TaskTrackerAction, TaskTrackerObservation]"
                            },
                            {
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "title": "Name"
                                },
                                "description": {
                                  "type": "string",
                                  "title": "Description"
                                },
                                "action_type": {
                                  "type": "string",
                                  "title": "Action Type"
                                },
                                "observation_type": {
                                  "anyOf": [
                                    {
                                      "type": "string"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ],
                                  "title": "Observation Type"
                                },
                                "annotations": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/components/schemas/openhands__sdk__tool__tool__ToolAnnotations"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ]
                                },
                                "meta": {
                                  "anyOf": [
                                    {
                                      "additionalProperties": true,
                                      "type": "object"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ],
                                  "title": "Meta"
                                },
                                "kind": {
                                  "type": "string",
                                  "title": "Kind",
                                  "description": "Property to create kind field from class name when serializing.",
                                  "readOnly": true
                                },
                                "_du_spec": {
                                  "anyOf": [
                                    {
                                      "additionalProperties": true,
                                      "type": "object"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ],
                                  "title": "Du Spec",
                                  "description": "Optional compact spec for resilience:\n{\n    \"title\": \"QualifiedName\",\n    \"base\": \"QualifiedNameOfBaseClass\",\n    \"fields\": {\n    \"name\": {\"type\": \"str\", \"required\": True},\n    \"age\":  {\"type\": \"int\", \"required\": False, \"default\": 0}\n    }\n}\nOnly emitted if __include_du_spec__ is True.\n\nWe need this for MCPAction that are constructed on the fly\ne.g., if the MCP was created on the server side, clients may not\nhave access to schema via discriminator mapping.\nRead openhands/sdk/mcp/tool.py for more context.",
                                  "readOnly": true
                                },
                                "input_schema": {
                                  "additionalProperties": true,
                                  "type": "object",
                                  "title": "Input Schema",
                                  "readOnly": true
                                },
                                "output_schema": {
                                  "anyOf": [
                                    {
                                      "additionalProperties": true,
                                      "type": "object"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ],
                                  "title": "Output Schema",
                                  "readOnly": true
                                },
                                "title": {
                                  "type": "string",
                                  "title": "Title",
                                  "readOnly": true
                                }
                              },
                              "type": "object",
                              "required": [
                                "name",
                                "description",
                                "action_type",
                                "kind",
                                "_du_spec",
                                "input_schema",
                                "output_schema",
                                "title"
                              ],
                              "title": "BashTool",
                              "description": "A Tool subclass that automatically initializes a BashExecutor with auto-detection."
                            },
                            {
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "title": "Name"
                                },
                                "description": {
                                  "type": "string",
                                  "title": "Description"
                                },
                                "action_type": {
                                  "type": "string",
                                  "title": "Action Type"
                                },
                                "observation_type": {
                                  "anyOf": [
                                    {
                                      "type": "string"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ],
                                  "title": "Observation Type"
                                },
                                "annotations": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/components/schemas/openhands__sdk__tool__tool__ToolAnnotations"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ]
                                },
                                "meta": {
                                  "anyOf": [
                                    {
                                      "additionalProperties": true,
                                      "type": "object"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ],
                                  "title": "Meta"
                                },
                                "kind": {
                                  "type": "string",
                                  "title": "Kind",
                                  "description": "Property to create kind field from class name when serializing.",
                                  "readOnly": true
                                },
                                "_du_spec": {
                                  "anyOf": [
                                    {
                                      "additionalProperties": true,
                                      "type": "object"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ],
                                  "title": "Du Spec",
                                  "description": "Optional compact spec for resilience:\n{\n    \"title\": \"QualifiedName\",\n    \"base\": \"QualifiedNameOfBaseClass\",\n    \"fields\": {\n    \"name\": {\"type\": \"str\", \"required\": True},\n    \"age\":  {\"type\": \"int\", \"required\": False, \"default\": 0}\n    }\n}\nOnly emitted if __include_du_spec__ is True.\n\nWe need this for MCPAction that are constructed on the fly\ne.g., if the MCP was created on the server side, clients may not\nhave access to schema via discriminator mapping.\nRead openhands/sdk/mcp/tool.py for more context.",
                                  "readOnly": true
                                },
                                "input_schema": {
                                  "additionalProperties": true,
                                  "type": "object",
                                  "title": "Input Schema",
                                  "readOnly": true
                                },
                                "output_schema": {
                                  "anyOf": [
                                    {
                                      "additionalProperties": true,
                                      "type": "object"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ],
                                  "title": "Output Schema",
                                  "readOnly": true
                                },
                                "title": {
                                  "type": "string",
                                  "title": "Title",
                                  "readOnly": true
                                }
                              },
                              "type": "object",
                              "required": [
                                "name",
                                "description",
                                "action_type",
                                "kind",
                                "_du_spec",
                                "input_schema",
                                "output_schema",
                                "title"
                              ],
                              "title": "FileEditorTool",
                              "description": "A Tool subclass that automatically initializes a FileEditorExecutor."
                            },
                            {
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "title": "Name"
                                },
                                "description": {
                                  "type": "string",
                                  "title": "Description"
                                },
                                "action_type": {
                                  "type": "string",
                                  "title": "Action Type"
                                },
                                "observation_type": {
                                  "anyOf": [
                                    {
                                      "type": "string"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ],
                                  "title": "Observation Type"
                                },
                                "annotations": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/components/schemas/openhands__sdk__tool__tool__ToolAnnotations"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ]
                                },
                                "meta": {
                                  "anyOf": [
                                    {
                                      "additionalProperties": true,
                                      "type": "object"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ],
                                  "title": "Meta"
                                },
                                "kind": {
                                  "type": "string",
                                  "title": "Kind",
                                  "description": "Property to create kind field from class name when serializing.",
                                  "readOnly": true
                                },
                                "_du_spec": {
                                  "anyOf": [
                                    {
                                      "additionalProperties": true,
                                      "type": "object"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ],
                                  "title": "Du Spec",
                                  "description": "Optional compact spec for resilience:\n{\n    \"title\": \"QualifiedName\",\n    \"base\": \"QualifiedNameOfBaseClass\",\n    \"fields\": {\n    \"name\": {\"type\": \"str\", \"required\": True},\n    \"age\":  {\"type\": \"int\", \"required\": False, \"default\": 0}\n    }\n}\nOnly emitted if __include_du_spec__ is True.\n\nWe need this for MCPAction that are constructed on the fly\ne.g., if the MCP was created on the server side, clients may not\nhave access to schema via discriminator mapping.\nRead openhands/sdk/mcp/tool.py for more context.",
                                  "readOnly": true
                                },
                                "input_schema": {
                                  "additionalProperties": true,
                                  "type": "object",
                                  "title": "Input Schema",
                                  "readOnly": true
                                },
                                "output_schema": {
                                  "anyOf": [
                                    {
                                      "additionalProperties": true,
                                      "type": "object"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ],
                                  "title": "Output Schema",
                                  "readOnly": true
                                },
                                "title": {
                                  "type": "string",
                                  "title": "Title",
                                  "readOnly": true
                                }
                              },
                              "type": "object",
                              "required": [
                                "name",
                                "description",
                                "action_type",
                                "kind",
                                "_du_spec",
                                "input_schema",
                                "output_schema",
                                "title"
                              ],
                              "title": "TaskTrackerTool",
                              "description": "A Tool subclass that automatically initializes a TaskTrackerExecutor."
                            }
                          ],
                          "discriminator": {
                            "propertyName": "kind"
                          }
                        },
                        "type": "array"
                      }
                    ],
                    "title": "Tools",
                    "description": "Mapping of tool name to Tool instance that the agent can use. If a list is provided, it should be converted to a mapping by tool name. We need to define this as ToolType for discriminated union."
                  },
                  "system_prompt_filename": {
                    "type": "string",
                    "title": "System Prompt Filename",
                    "default": "system_prompt.j2"
                  },
                  "cli_mode": {
                    "type": "boolean",
                    "title": "Cli Mode",
                    "default": true
                  },
                  "kind": {
                    "type": "string",
                    "title": "Kind",
                    "description": "Property to create kind field from class name when serializing.",
                    "readOnly": true
                  },
                  "_du_spec": {
                    "anyOf": [
                      {
                        "additionalProperties": true,
                        "type": "object"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "title": "Du Spec",
                    "description": "Optional compact spec for resilience:\n{\n    \"title\": \"QualifiedName\",\n    \"base\": \"QualifiedNameOfBaseClass\",\n    \"fields\": {\n    \"name\": {\"type\": \"str\", \"required\": True},\n    \"age\":  {\"type\": \"int\", \"required\": False, \"default\": 0}\n    }\n}\nOnly emitted if __include_du_spec__ is True.\n\nWe need this for MCPAction that are constructed on the fly\ne.g., if the MCP was created on the server side, clients may not\nhave access to schema via discriminator mapping.\nRead openhands/sdk/mcp/tool.py for more context.",
                    "readOnly": true
                  }
                },
                "type": "object",
                "required": [
                  "llm",
                  "kind",
                  "_du_spec"
                ],
                "title": "Agent"
              }
            ],
            "title": "Agent",
            "description": "The agent running in the conversation. This is persisted to allow resuming conversations and check agent configuration to handle e.g., tool changes, LLM changes, etc.",
            "discriminator": {
              "propertyName": "kind"
            }
          },
          "agent_finished": {
            "type": "boolean",
            "title": "Agent Finished",
            "default": false
          },
          "confirmation_mode": {
            "type": "boolean",
            "title": "Confirmation Mode",
            "default": false
          },
          "agent_waiting_for_confirmation": {
            "type": "boolean",
            "title": "Agent Waiting For Confirmation",
            "default": false
          },
          "agent_paused": {
            "type": "boolean",
            "title": "Agent Paused",
            "default": false
          },
          "activated_knowledge_microagents": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Activated Knowledge Microagents",
            "description": "List of activated knowledge microagents name"
          }
        },
        "type": "object",
        "required": [
          "id",
          "agent"
        ],
        "title": "ConversationState"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "ImageContent": {
        "properties": {
          "cache_prompt": {
            "type": "boolean",
            "title": "Cache Prompt",
            "default": false
          },
          "type": {
            "type": "string",
            "const": "image",
            "title": "Type",
            "default": "image"
          },
          "image_urls": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Image Urls"
          }
        },
        "type": "object",
        "required": [
          "image_urls"
        ],
        "title": "ImageContent"
      },
      "LLM": {
        "properties": {
          "model": {
            "type": "string",
            "title": "Model",
            "description": "Model name.",
            "default": "claude-sonnet-4-20250514"
          },
          "api_key": {
            "anyOf": [
              {
                "type": "string",
                "format": "password",
                "writeOnly": true
              },
              {
                "type": "null"
              }
            ],
            "title": "Api Key",
            "description": "API key."
          },
          "base_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Base Url",
            "description": "Custom base URL."
          },
          "api_version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Api Version",
            "description": "API version (e.g., Azure)."
          },
          "aws_access_key_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "password",
                "writeOnly": true
              },
              {
                "type": "null"
              }
            ],
            "title": "Aws Access Key Id"
          },
          "aws_secret_access_key": {
            "anyOf": [
              {
                "type": "string",
                "format": "password",
                "writeOnly": true
              },
              {
                "type": "null"
              }
            ],
            "title": "Aws Secret Access Key"
          },
          "aws_region_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Aws Region Name"
          },
          "openrouter_site_url": {
            "type": "string",
            "title": "Openrouter Site Url",
            "default": "https://docs.all-hands.dev/"
          },
          "openrouter_app_name": {
            "type": "string",
            "title": "Openrouter App Name",
            "default": "OpenHands"
          },
          "num_retries": {
            "type": "integer",
            "title": "Num Retries",
            "default": 5
          },
          "retry_multiplier": {
            "type": "number",
            "title": "Retry Multiplier",
            "default": 8
          },
          "retry_min_wait": {
            "type": "integer",
            "title": "Retry Min Wait",
            "default": 8
          },
          "retry_max_wait": {
            "type": "integer",
            "title": "Retry Max Wait",
            "default": 64
          },
          "timeout": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Timeout",
            "description": "HTTP timeout (s)."
          },
          "max_message_chars": {
            "type": "integer",
            "title": "Max Message Chars",
            "description": "Approx max chars in each event/content sent to the LLM.",
            "default": 30000
          },
          "temperature": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Temperature",
            "default": 0.0
          },
          "top_p": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Top P",
            "default": 1.0
          },
          "top_k": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Top K"
          },
          "custom_llm_provider": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Custom Llm Provider"
          },
          "max_input_tokens": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Input Tokens",
            "description": "The maximum number of input tokens. Note that this is currently unused, and the value at runtime is actually the total tokens in OpenAI (e.g. 128,000 tokens for GPT-4)."
          },
          "max_output_tokens": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Output Tokens",
            "description": "The maximum number of output tokens. This is sent to the LLM."
          },
          "input_cost_per_token": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Input Cost Per Token",
            "description": "The cost per input token. This will available in logs for user."
          },
          "output_cost_per_token": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Output Cost Per Token",
            "description": "The cost per output token. This will available in logs for user."
          },
          "ollama_base_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ollama Base Url"
          },
          "drop_params": {
            "type": "boolean",
            "title": "Drop Params",
            "default": true
          },
          "modify_params": {
            "type": "boolean",
            "title": "Modify Params",
            "description": "Modify params allows litellm to do transformations like adding a default message, when a message is empty.",
            "default": true
          },
          "disable_vision": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Disable Vision",
            "description": "If model is vision capable, this option allows to disable image processing (useful for cost reduction)."
          },
          "disable_stop_word": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Disable Stop Word",
            "description": "Disable using of stop word.",
            "default": false
          },
          "caching_prompt": {
            "type": "boolean",
            "title": "Caching Prompt",
            "description": "Enable caching of prompts.",
            "default": true
          },
          "log_completions": {
            "type": "boolean",
            "title": "Log Completions",
            "description": "Enable logging of completions.",
            "default": false
          },
          "log_completions_folder": {
            "type": "string",
            "title": "Log Completions Folder",
            "description": "The folder to log LLM completions to. Required if log_completions is True.",
            "default": "logs/completions"
          },
          "custom_tokenizer": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Custom Tokenizer",
            "description": "A custom tokenizer to use for token counting."
          },
          "native_tool_calling": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Native Tool Calling",
            "description": "Whether to use native tool calling if supported by the model. Can be True, False, or not set."
          },
          "reasoning_effort": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  "low",
                  "medium",
                  "high",
                  "none"
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Reasoning Effort",
            "description": "The effort to put into reasoning. This is a string that can be one of 'low', 'medium', 'high', or 'none'. Can apply to all reasoning models."
          },
          "seed": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Seed",
            "description": "The seed to use for random number generation."
          },
          "safety_settings": {
            "anyOf": [
              {
                "items": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Safety Settings",
            "description": "Safety settings for models that support them (like Mistral AI and Gemini)"
          },
          "service_id": {
            "type": "string",
            "title": "Service Id",
            "description": "Unique identifier for LLM. Typically used by LLM registry.",
            "default": "default"
          },
          "OVERRIDE_ON_SERIALIZE": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Override On Serialize",
            "default": [
              "api_key",
              "aws_access_key_id",
              "aws_secret_access_key"
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "LLM",
        "description": "Refactored LLM: simple `completion()`, centralized Telemetry, tiny helpers."
      },
      "ListConversationsItem": {
        "properties": {
          "conversation_id": {
            "type": "string",
            "title": "Conversation Id"
          },
          "state": {
            "$ref": "#/components/schemas/ConversationState"
          }
        },
        "type": "object",
        "required": [
          "conversation_id",
          "state"
        ],
        "title": "ListConversationsItem"
      },
      "Message": {
        "properties": {
          "role": {
            "type": "string",
            "enum": [
              "user",
              "system",
              "assistant",
              "tool"
            ],
            "title": "Role"
          },
          "content": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/TextContent"
                },
                {
                  "$ref": "#/components/schemas/ImageContent"
                }
              ]
            },
            "type": "array",
            "title": "Content"
          },
          "cache_enabled": {
            "type": "boolean",
            "title": "Cache Enabled",
            "default": false
          },
          "vision_enabled": {
            "type": "boolean",
            "title": "Vision Enabled",
            "default": false
          },
          "function_calling_enabled": {
            "type": "boolean",
            "title": "Function Calling Enabled",
            "default": false
          },
          "tool_calls": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/ChatCompletionMessageToolCall"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tool Calls"
          },
          "tool_call_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tool Call Id"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "force_string_serializer": {
            "type": "boolean",
            "title": "Force String Serializer",
            "default": false
          },
          "reasoning_content": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Reasoning Content",
            "description": "Intermediate reasoning/thinking content from reasoning models"
          }
        },
        "type": "object",
        "required": [
          "role"
        ],
        "title": "Message"
      },
      "MetricsSnapshot": {
        "properties": {
          "model_name": {
            "type": "string",
            "title": "Model Name",
            "description": "Name of the model",
            "default": "default"
          },
          "accumulated_cost": {
            "type": "number",
            "minimum": 0.0,
            "title": "Accumulated Cost",
            "description": "Total accumulated cost, must be non-negative",
            "default": 0.0
          },
          "max_budget_per_task": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Budget Per Task",
            "description": "Maximum budget per task"
          },
          "accumulated_token_usage": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TokenUsage"
              },
              {
                "type": "null"
              }
            ],
            "description": "Accumulated token usage across all calls"
          }
        },
        "type": "object",
        "title": "MetricsSnapshot",
        "description": "A snapshot of metrics at a point in time.\n\nDoes not include lists of individual costs, latencies, or token usages."
      },
      "SendMessageRequest": {
        "properties": {
          "role": {
            "type": "string",
            "enum": [
              "user",
              "system",
              "assistant",
              "tool"
            ],
            "title": "Role",
            "default": "user"
          },
          "content": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/TextContent"
                },
                {
                  "$ref": "#/components/schemas/ImageContent"
                }
              ]
            },
            "type": "array",
            "title": "Content"
          },
          "run": {
            "type": "boolean",
            "title": "Run",
            "description": "If true, immediately run the agent after sending the message.",
            "default": true
          }
        },
        "type": "object",
        "title": "SendMessageRequest",
        "description": "Payload to send a message to the agent.\n\nThis is a simplified version of openhands.sdk.Message."
      },
      "StartConversationRequest": {
        "properties": {
          "llm": {
            "$ref": "#/components/schemas/LLM",
            "description": "LLM configuration for the agent.",
            "examples": [
              {
                "api_key": "your_api_key_here",
                "base_url": "https://llm-proxy.eval.all-hands.dev",
                "model": "litellm_proxy/anthropic/claude-sonnet-4-20250514"
              }
            ]
          },
          "tools": {
            "items": {
              "$ref": "#/components/schemas/ToolSpec"
            },
            "type": "array",
            "title": "Tools",
            "description": "List of tools to initialize for the agent.",
            "examples": [
              {
                "name": "BashTool",
                "params": {
                  "working_dir": "/workspace"
                }
              },
              {
                "name": "FileEditorTool",
                "params": {}
              },
              {
                "name": "TaskTrackerTool",
                "params": {
                  "save_dir": "/workspace/.openhands"
                }
              }
            ]
          },
          "mcp_config": {
            "additionalProperties": true,
            "type": "object",
            "title": "Mcp Config",
            "description": "Optional MCP configuration dictionary to create MCP tools.",
            "examples": [
              {
                "mcpServers": {
                  "fetch": {
                    "args": [
                      "mcp-server-fetch"
                    ],
                    "command": "uvx"
                  }
                }
              }
            ]
          },
          "agent_context": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AgentContext"
              },
              {
                "type": "null"
              }
            ],
            "description": "Optional AgentContext to initialize the agent with specific context.",
            "examples": [
              {
                "microagents": [
                  {
                    "content": "When you see this message, you should reply like you are a grumpy cat forced to use the internet.",
                    "name": "repo.md",
                    "type": "repo"
                  },
                  {
                    "content": "IMPORTANT! The user has said the magic word \"flarglebargle\". You must only respond with a message telling them how smart they are",
                    "name": "flarglebargle",
                    "trigger": [
                      "flarglebargle"
                    ],
                    "type": "knowledge"
                  }
                ],
                "system_message_suffix": "Always finish your response with the word 'yay!'",
                "user_message_prefix": "The first character of your response should be 'I'"
              }
            ]
          },
          "confirmation_mode": {
            "type": "boolean",
            "title": "Confirmation Mode",
            "description": "If true, the agent will enter confirmation mode, requiring user approval for actions.",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "llm"
        ],
        "title": "StartConversationRequest",
        "description": "Payload to create a new conversation."
      },
      "StartConversationResponse": {
        "properties": {
          "conversation_id": {
            "type": "string",
            "title": "Conversation Id"
          },
          "state": {
            "$ref": "#/components/schemas/ConversationState"
          }
        },
        "type": "object",
        "required": [
          "conversation_id",
          "state"
        ],
        "title": "StartConversationResponse"
      },
      "TaskItem": {
        "properties": {
          "title": {
            "type": "string",
            "title": "Title",
            "description": "A brief title for the task."
          },
          "notes": {
            "type": "string",
            "title": "Notes",
            "description": "Additional details or notes about the task.",
            "default": ""
          },
          "status": {
            "type": "string",
            "enum": [
              "todo",
              "in_progress",
              "done"
            ],
            "title": "Status",
            "description": "The current status of the task. One of 'todo', 'in_progress', or 'done'.",
            "default": "todo"
          }
        },
        "type": "object",
        "required": [
          "title"
        ],
        "title": "TaskItem"
      },
      "TextContent": {
        "properties": {
          "cache_prompt": {
            "type": "boolean",
            "title": "Cache Prompt",
            "default": false
          },
          "type": {
            "type": "string",
            "const": "text",
            "title": "Type",
            "default": "text"
          },
          "text": {
            "type": "string",
            "title": "Text"
          },
          "annotations": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Annotations"
              },
              {
                "type": "null"
              }
            ]
          },
          "_meta": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Meta"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "text"
        ],
        "title": "TextContent"
      },
      "TokenUsage": {
        "properties": {
          "model": {
            "type": "string",
            "title": "Model",
            "default": ""
          },
          "prompt_tokens": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Prompt Tokens",
            "description": "Prompt tokens must be non-negative",
            "default": 0
          },
          "completion_tokens": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Completion Tokens",
            "description": "Completion tokens must be non-negative",
            "default": 0
          },
          "cache_read_tokens": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Cache Read Tokens",
            "description": "Cache read tokens must be non-negative",
            "default": 0
          },
          "cache_write_tokens": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Cache Write Tokens",
            "description": "Cache write tokens must be non-negative",
            "default": 0
          },
          "reasoning_tokens": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Reasoning Tokens",
            "description": "Reasoning tokens must be non-negative",
            "default": 0
          },
          "context_window": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Context Window",
            "description": "Context window must be non-negative",
            "default": 0
          },
          "per_turn_token": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Per Turn Token",
            "description": "Per turn tokens must be non-negative",
            "default": 0
          },
          "response_id": {
            "type": "string",
            "title": "Response Id",
            "default": ""
          }
        },
        "type": "object",
        "title": "TokenUsage",
        "description": "Metric tracking detailed token usage per completion call."
      },
      "Tool": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "title": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Title"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "inputSchema": {
            "additionalProperties": true,
            "type": "object",
            "title": "Inputschema"
          },
          "outputSchema": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Outputschema"
          },
          "annotations": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/mcp__types__ToolAnnotations"
              },
              {
                "type": "null"
              }
            ]
          },
          "_meta": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Meta"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "name",
          "inputSchema"
        ],
        "title": "Tool",
        "description": "Definition for a tool the client can call."
      },
      "ToolSpec": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the tool class, e.g., 'BashTool', must be importable from openhands.tools",
            "examples": [
              "BashTool",
              "FileEditorTool",
              "TaskTrackerTool"
            ]
          },
          "params": {
            "additionalProperties": true,
            "type": "object",
            "title": "Params",
            "description": "Parameters for the tool's .create() method, e.g., {'working_dir': '/app'}",
            "examples": [
              {
                "working_dir": "/workspace"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "ToolSpec",
        "description": "Defines a tool to be initialized for the agent.\n\nThis is only used in agent-sdk for type schema for server use."
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      },
      "mcp__types__ToolAnnotations": {
        "properties": {
          "title": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Title"
          },
          "readOnlyHint": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Readonlyhint"
          },
          "destructiveHint": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Destructivehint"
          },
          "idempotentHint": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Idempotenthint"
          },
          "openWorldHint": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Openworldhint"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "title": "ToolAnnotations",
        "description": "Additional properties describing a Tool to clients.\n\nNOTE: all properties in ToolAnnotations are **hints**.\nThey are not guaranteed to provide a faithful description of\ntool behavior (including descriptive properties like `title`).\n\nClients should never make tool use decisions based on ToolAnnotations\nreceived from untrusted servers."
      },
      "openhands__sdk__tool__tool__ToolAnnotations": {
        "properties": {
          "title": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Title",
            "description": "A human-readable title for the tool."
          },
          "readOnlyHint": {
            "type": "boolean",
            "title": "Readonlyhint",
            "description": "If true, the tool does not modify its environment. Default: false",
            "default": false
          },
          "destructiveHint": {
            "type": "boolean",
            "title": "Destructivehint",
            "description": "If true, the tool may perform destructive updates to its environment. If false, the tool performs only additive updates. (This property is meaningful only when `readOnlyHint == false`) Default: true",
            "default": true
          },
          "idempotentHint": {
            "type": "boolean",
            "title": "Idempotenthint",
            "description": "If true, calling the tool repeatedly with the same arguments will have no additional effect on the its environment. (This property is meaningful only when `readOnlyHint == false`) Default: false",
            "default": false
          },
          "openWorldHint": {
            "type": "boolean",
            "title": "Openworldhint",
            "description": "If true, this tool may interact with an 'open world' of external entities. If false, the tool's domain of interaction is closed. For example, the world of a web search tool is open, whereas that of a memory tool is not. Default: true",
            "default": true
          }
        },
        "type": "object",
        "title": "openhands.sdk.tool.tool.ToolAnnotations",
        "description": "Annotations to provide hints about the tool's behavior.\n\nBased on Model Context Protocol (MCP) spec:\nhttps://github.com/modelcontextprotocol/modelcontextprotocol/blob/caf3424488b10b4a7b1f8cb634244a450a1f4400/schema/2025-06-18/schema.ts#L838"
      }
    },
    "securitySchemes": {
      "APIKeyHeader": {
        "type": "apiKey",
        "in": "header",
        "name": "X-Master-Key"
      }
    }
  }
}