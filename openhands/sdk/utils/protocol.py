from typing import Iterator, Protocol, TypeVar, overload


T = TypeVar("T")


class ListLike(Protocol[T]):
    @overload
    def __getitem__(self, index: int) -> T: ...

    @overload
    def __getitem__(self, index: slice) -> list[T]: ...

    def __getitem__(self, index: int | slice) -> T | list[T]: ...
    def __iter__(self) -> Iterator[T]: ...
    def append(self, __object: T, /) -> None: ...
    def __len__(self) -> int: ...
