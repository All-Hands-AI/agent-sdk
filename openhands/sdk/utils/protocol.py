from typing import Iterator, Protocol, SupportsIndex, TypeVar, overload


T = TypeVar("T")


class ListLike(Protocol[T]):
    @overload
    def __getitem__(self, index: SupportsIndex, /) -> T: ...
    @overload
    def __getitem__(self, index: slice, /) -> list[T]: ...
    def __getitem__(self, index: SupportsIndex | slice, /) -> T | list[T]: ...
    def __iter__(self) -> Iterator[T]: ...
    def __len__(self) -> int: ...
    def append(self, __object: T, /) -> None: ...
