# UV workspace configuration
[tool.uv.workspace]
members = ["openhands-sdk", "openhands-tools", "openhands-workspace", "openhands-agent-server"]

# Workspace sources for intra-repo dependencies
[tool.uv.sources]
openhands-sdk = { workspace = true }
openhands-tools = { workspace = true }
openhands-workspace = { workspace = true }
openhands-agent-server = { workspace = true }

[dependency-groups]
dev = [
    "pre-commit>=4.3.0",
    "psutil>=7.0.0",
    "pyright[nodejs]>=1.1.405",
    "pytest>=8.4.1",
    "pytest-cov>=5.0.0",
    "ruff>=0.12.10",
    "pycodestyle>=2.12.0",
    "pytest-asyncio>=1.1.0",
    "pytest-forked>=1.6.0",
    "tabulate>=0.9.0",
    "pyinstaller>=6.16.0",
    "streamlit>=1.49.1",
    "pytest-timeout>=2.4.0",
]

# Ruff configuration
[tool.ruff]
target-version = "py312"
line-length = 88

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "F",    # pyflakes (includes F841: unused-variable)
    "I",    # isort
    "UP",   # pyupgrade
    "ARG",  # flake8-unused-arguments
]

[tool.ruff.lint.per-file-ignores]
# Test files often have unused arguments (fixtures, mocks, interface implementations)
"tests/**/*.py" = ["ARG"]

[tool.ruff.lint.isort]
known-first-party = ["openhands"]
combine-as-imports = true
force-single-line = false
lines-after-imports = 2

# Pytest configuration
[tool.pytest.ini_options]
testpaths = [
    "tests"
]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short"
asyncio_mode = "auto"

# Pyright configuration for PEP 420 namespace packages
# This is needed for VSCode to properly resolve imports across multiple packages in the monorepo
[tool.pyright]
include = [
    "openhands-sdk",
    "openhands-tools",
    "openhands-workspace",
    "openhands-agent-server",
    "examples",
    "tests",
    "scripts"
]
extraPaths = [
    "openhands-sdk",
    "openhands-tools",
    "openhands-workspace",
    "openhands-agent-server"
]
pythonVersion = "3.12"
useLibraryCodeForTypes = true

# basedpyright configuration
[tool.basedpyright]
include = ["openhands"]
exclude = ["**/__pycache__", "**/.venv", "**/node_modules"]

# Start with basic type checking and gradually increase strictness
typeCheckingMode = "basic"

# Disable some of the most noisy warnings initially to focus on critical errors
reportUnusedCallResult = false
reportAny = false
reportUnknownMemberType = false
reportUnknownArgumentType = false
reportImplicitOverride = false
reportUnnecessaryIsInstance = false
reportImplicitStringConcatenation = false
reportAttributeAccessIssue = false
reportOptionalMemberAccess = false
reportRedeclaration = false
reportMissingImports = false
reportArgumentType = false
reportCallIssue = false

# Keep critical errors enabled, but allow some flexibility for generic types
reportMissingTypeArgument = false  # Too strict for existing generic Tool usage
reportUnannotatedClassAttribute = true
reportExplicitAny = false  # Allow Any for generic type parameters

[[tool.uv.index]]
name = "testpypi"
url = "https://test.pypi.org/simple/"
publish-url = "https://test.pypi.org/legacy/"
explicit = true
