---
name: Automated TODO Management

# This workflow demonstrates how to use the OpenHands SDK to automatically
# scan for TODO(openhands) comments and create pull requests to implement them.

on:
  # Run on schedule (daily at 2 AM UTC)
    schedule:
        - cron: 0 2 * * *

  # Allow manual triggering
    workflow_dispatch:
        inputs:
            dry_run:
                description: Run in dry-run mode (scan only, no PRs)
                required: false
                default: 'false'
                type: boolean
            max_todos:
                description: Maximum number of TODOs to process
                required: false
                default: '3'
                type: string

permissions:
    contents: write
    pull-requests: write
    issues: read

jobs:
    todo-management:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
          # Fetch full history for proper git operations
                  fetch-depth: 0
          # Use a token that can create PRs
                  token: ${{ secrets.GITHUB_TOKEN }}

            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                  python-version: '3.12'
            - name: Install uv
              uses: astral-sh/setup-uv@v6
              with:
                  enable-cache: true

            - name: Install dependencies
              run: |
                  uv sync --frozen --group dev

            - name: Configure Git
              run: |
                  git config --global user.name "openhands-bot"
                  git config --global user.email "openhands@all-hands.dev"

            - name: Create TODO management config
              run: |
                  mkdir -p .github/todo-config
                  cat > .github/todo-config/config.json << 'EOF'
                  {
                    "max_todos_per_run": ${{ github.event.inputs.max_todos || '3' }},
                    "branch_prefix": "openhands/todo-",
                    "pr_title_template": "ðŸ¤– Implement TODO: {todo_text}",
                    "pr_body_template": "## Automated TODO Implementation\n\nThis PR implements a TODO comment found in the codebase.\n\n**TODO Details:**\n- File: `{file_path}`\n- Line: {line_number}\n- Description: {todo_text}\n\n**Implementation Summary:**\n{implementation_summary}\n\n**Context:**\n```\n{context}\n```\n\n---\n\nðŸ¤– This PR was automatically generated by the OpenHands TODO management system.\n\n**Review Guidelines:**\n- [ ] Verify the implementation matches the TODO requirements\n- [ ] Check that tests are included (if applicable)\n- [ ] Ensure code follows project conventions\n- [ ] Confirm no breaking changes are introduced\n\n**Next Steps:**\n- Review and test the implementation\n- Merge if approved, or provide feedback for improvements\n- The TODO comment has been marked as completed in the code",
                    "exclude_patterns": [".venv", "__pycache__", ".git", "node_modules", "dist", "build"]
                  }
                  EOF

            - name: Run TODO management (dry-run)
              if: ${{ github.event.inputs.dry_run == 'true' }}
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  LITELLM_API_KEY: ${{ secrets.LITELLM_API_KEY }}
              run: |
                  echo "Running in dry-run mode..."
                  uv run python examples/20_automated_todo_management.py \
                    --repo-path . \
                    --repo-owner ${{ github.repository_owner }} \
                    --repo-name ${{ github.event.repository.name }} \
                    --config .github/todo-config/config.json \
                    --dry-run

            - name: Run TODO management (live)
              if: ${{ github.event.inputs.dry_run != 'true' }}
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  LITELLM_API_KEY: ${{ secrets.LITELLM_API_KEY }}
              run: |
                  echo "Running TODO management..."
                  uv run python examples/20_automated_todo_management.py \
                    --repo-path . \
                    --repo-owner ${{ github.repository_owner }} \
                    --repo-name ${{ github.event.repository.name }} \
                    --config .github/todo-config/config.json

            - name: Create summary report
              if: always()
              run: |
                  echo "## TODO Management Summary" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "**Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
                  echo "**Run Mode:** ${{ github.event.inputs.dry_run == 'true' && 'Dry Run' || 'Live' }}" >> $GITHUB_STEP_SUMMARY
                  echo "**Triggered by:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY

                  # Count current TODOs
                  TODO_COUNT=$(grep -r "TODO(openhands)" . --include="*.py" --exclude-dir=".venv" --exclude-dir="__pycache__" --exclude-dir=".git" | wc -l || echo "0")
                  IN_PROGRESS_COUNT=$(grep -r "TODO(openhands-in-progress)" . --include="*.py" --exclude-dir=".venv" --exclude-dir="__pycache__" --exclude-dir=".git" | wc -l || echo "0")

                  echo "**Current Status:**" >> $GITHUB_STEP_SUMMARY
                  echo "- TODOs remaining: $TODO_COUNT" >> $GITHUB_STEP_SUMMARY
                  echo "- TODOs in progress: $IN_PROGRESS_COUNT" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY

                  if [ "$TODO_COUNT" -gt 0 ]; then
                    echo "**Remaining TODOs:**" >> $GITHUB_STEP_SUMMARY
                    echo '```' >> $GITHUB_STEP_SUMMARY
                    grep -r "TODO(openhands)" . --include="*.py" --exclude-dir=".venv" --exclude-dir="__pycache__" --exclude-dir=".git" | head -10 >> $GITHUB_STEP_SUMMARY || true
                    echo '```' >> $GITHUB_STEP_SUMMARY
                  fi

            - name: Notify on failure
              if: failure()
              uses: actions/github-script@v7
              with:
                  script: |
                      const issue_body = `## ðŸš¨ TODO Management Workflow Failed

                      The automated TODO management workflow has failed.

                      **Details:**
                      - **Repository:** ${{ github.repository }}
                      - **Run ID:** ${{ github.run_id }}
                      - **Workflow:** ${{ github.workflow }}
                      - **Triggered by:** ${{ github.event_name }}

                      **Next Steps:**
                      1. Check the [workflow logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
                      2. Verify environment variables are set correctly
                      3. Check for any API rate limits or permissions issues

                      This issue was automatically created by the TODO management system.`;

                      // Only create issue if one doesn't already exist
                      const issues = await github.rest.issues.listForRepo({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        state: 'open',
                        labels: 'automated-todo-management,bug'
                      });

                      const existingIssue = issues.data.find(issue => 
                        issue.title.includes('TODO Management Workflow Failed')
                      );

                      if (!existingIssue) {
                        await github.rest.issues.create({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          title: 'ðŸš¨ TODO Management Workflow Failed',
                          body: issue_body,
                          labels: ['automated-todo-management', 'bug']
                        });
                      }

  # Optional: Clean up old branches created by the TODO management system
    cleanup:
        runs-on: ubuntu-latest
        needs: todo-management
        if: always()

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0
                  token: ${{ secrets.GITHUB_TOKEN }}

            - name: Clean up old TODO branches
              uses: actions/github-script@v7
              with:
                  script: |-
                      // Get all branches that start with 'openhands/todo-'
                      const branches = await github.rest.repos.listBranches({
                        owner: context.repo.owner,
                        repo: context.repo.repo
                      });

                      const todoBranches = branches.data.filter(branch => 
                        branch.name.startsWith('openhands/todo-')
                      );

                      console.log(`Found ${todoBranches.length} TODO branches`);

                      for (const branch of todoBranches) {
                        try {
                          // Check if there's an open PR for this branch
                          const prs = await github.rest.pulls.list({
                            owner: context.repo.owner,
                            repo: context.repo.repo,
                            head: `${context.repo.owner}:${branch.name}`,
                            state: 'open'
                          });
                          
                          // If no open PR and branch is older than 30 days, delete it
                          if (prs.data.length === 0) {
                            const branchInfo = await github.rest.repos.getBranch({
                              owner: context.repo.owner,
                              repo: context.repo.repo,
                              branch: branch.name
                            });
                            
                            const branchDate = new Date(branchInfo.data.commit.commit.committer.date);
                            const thirtyDaysAgo = new Date();
                            thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
                            
                            if (branchDate < thirtyDaysAgo) {
                              console.log(`Deleting old branch: ${branch.name}`);
                              await github.rest.git.deleteRef({
                                owner: context.repo.owner,
                                repo: context.repo.repo,
                                ref: `heads/${branch.name}`
                              });
                            }
                          }
                        } catch (error) {
                          console.log(`Error processing branch ${branch.name}: ${error.message}`);
                        }
                      }
